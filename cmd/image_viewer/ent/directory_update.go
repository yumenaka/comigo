// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yumenaka/comigo/cmd/image_viewer/ent/directory"
	"github.com/yumenaka/comigo/cmd/image_viewer/ent/image"
	"github.com/yumenaka/comigo/cmd/image_viewer/ent/predicate"
)

// DirectoryUpdate is the builder for updating Directory entities.
type DirectoryUpdate struct {
	config
	hooks    []Hook
	mutation *DirectoryMutation
}

// Where appends a list predicates to the DirectoryUpdate builder.
func (du *DirectoryUpdate) Where(ps ...predicate.Directory) *DirectoryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetPath sets the "path" field.
func (du *DirectoryUpdate) SetPath(s string) *DirectoryUpdate {
	du.mutation.SetPath(s)
	return du
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (du *DirectoryUpdate) SetNillablePath(s *string) *DirectoryUpdate {
	if s != nil {
		du.SetPath(*s)
	}
	return du
}

// SetName sets the "name" field.
func (du *DirectoryUpdate) SetName(s string) *DirectoryUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DirectoryUpdate) SetNillableName(s *string) *DirectoryUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetParentID sets the "parent" edge to the Directory entity by ID.
func (du *DirectoryUpdate) SetParentID(id int) *DirectoryUpdate {
	du.mutation.SetParentID(id)
	return du
}

// SetNillableParentID sets the "parent" edge to the Directory entity by ID if the given value is not nil.
func (du *DirectoryUpdate) SetNillableParentID(id *int) *DirectoryUpdate {
	if id != nil {
		du = du.SetParentID(*id)
	}
	return du
}

// SetParent sets the "parent" edge to the Directory entity.
func (du *DirectoryUpdate) SetParent(d *Directory) *DirectoryUpdate {
	return du.SetParentID(d.ID)
}

// AddChildIDs adds the "children" edge to the Directory entity by IDs.
func (du *DirectoryUpdate) AddChildIDs(ids ...int) *DirectoryUpdate {
	du.mutation.AddChildIDs(ids...)
	return du
}

// AddChildren adds the "children" edges to the Directory entity.
func (du *DirectoryUpdate) AddChildren(d ...*Directory) *DirectoryUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddChildIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (du *DirectoryUpdate) AddImageIDs(ids ...int) *DirectoryUpdate {
	du.mutation.AddImageIDs(ids...)
	return du
}

// AddImages adds the "images" edges to the Image entity.
func (du *DirectoryUpdate) AddImages(i ...*Image) *DirectoryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return du.AddImageIDs(ids...)
}

// Mutation returns the DirectoryMutation object of the builder.
func (du *DirectoryUpdate) Mutation() *DirectoryMutation {
	return du.mutation
}

// ClearParent clears the "parent" edge to the Directory entity.
func (du *DirectoryUpdate) ClearParent() *DirectoryUpdate {
	du.mutation.ClearParent()
	return du
}

// ClearChildren clears all "children" edges to the Directory entity.
func (du *DirectoryUpdate) ClearChildren() *DirectoryUpdate {
	du.mutation.ClearChildren()
	return du
}

// RemoveChildIDs removes the "children" edge to Directory entities by IDs.
func (du *DirectoryUpdate) RemoveChildIDs(ids ...int) *DirectoryUpdate {
	du.mutation.RemoveChildIDs(ids...)
	return du
}

// RemoveChildren removes "children" edges to Directory entities.
func (du *DirectoryUpdate) RemoveChildren(d ...*Directory) *DirectoryUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveChildIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (du *DirectoryUpdate) ClearImages() *DirectoryUpdate {
	du.mutation.ClearImages()
	return du
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (du *DirectoryUpdate) RemoveImageIDs(ids ...int) *DirectoryUpdate {
	du.mutation.RemoveImageIDs(ids...)
	return du
}

// RemoveImages removes "images" edges to Image entities.
func (du *DirectoryUpdate) RemoveImages(i ...*Image) *DirectoryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return du.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DirectoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DirectoryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DirectoryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DirectoryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DirectoryUpdate) check() error {
	if v, ok := du.mutation.Path(); ok {
		if err := directory.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Directory.path": %w`, err)}
		}
	}
	if v, ok := du.mutation.Name(); ok {
		if err := directory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Directory.name": %w`, err)}
		}
	}
	return nil
}

func (du *DirectoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(directory.Table, directory.Columns, sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Path(); ok {
		_spec.SetField(directory.FieldPath, field.TypeString, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(directory.FieldName, field.TypeString, value)
	}
	if du.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildrenTable,
			Columns: []string{directory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !du.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildrenTable,
			Columns: []string{directory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildrenTable,
			Columns: []string{directory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ImagesTable,
			Columns: []string{directory.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedImagesIDs(); len(nodes) > 0 && !du.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ImagesTable,
			Columns: []string{directory.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ImagesTable,
			Columns: []string{directory.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DirectoryUpdateOne is the builder for updating a single Directory entity.
type DirectoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DirectoryMutation
}

// SetPath sets the "path" field.
func (duo *DirectoryUpdateOne) SetPath(s string) *DirectoryUpdateOne {
	duo.mutation.SetPath(s)
	return duo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (duo *DirectoryUpdateOne) SetNillablePath(s *string) *DirectoryUpdateOne {
	if s != nil {
		duo.SetPath(*s)
	}
	return duo
}

// SetName sets the "name" field.
func (duo *DirectoryUpdateOne) SetName(s string) *DirectoryUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DirectoryUpdateOne) SetNillableName(s *string) *DirectoryUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetParentID sets the "parent" edge to the Directory entity by ID.
func (duo *DirectoryUpdateOne) SetParentID(id int) *DirectoryUpdateOne {
	duo.mutation.SetParentID(id)
	return duo
}

// SetNillableParentID sets the "parent" edge to the Directory entity by ID if the given value is not nil.
func (duo *DirectoryUpdateOne) SetNillableParentID(id *int) *DirectoryUpdateOne {
	if id != nil {
		duo = duo.SetParentID(*id)
	}
	return duo
}

// SetParent sets the "parent" edge to the Directory entity.
func (duo *DirectoryUpdateOne) SetParent(d *Directory) *DirectoryUpdateOne {
	return duo.SetParentID(d.ID)
}

// AddChildIDs adds the "children" edge to the Directory entity by IDs.
func (duo *DirectoryUpdateOne) AddChildIDs(ids ...int) *DirectoryUpdateOne {
	duo.mutation.AddChildIDs(ids...)
	return duo
}

// AddChildren adds the "children" edges to the Directory entity.
func (duo *DirectoryUpdateOne) AddChildren(d ...*Directory) *DirectoryUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddChildIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (duo *DirectoryUpdateOne) AddImageIDs(ids ...int) *DirectoryUpdateOne {
	duo.mutation.AddImageIDs(ids...)
	return duo
}

// AddImages adds the "images" edges to the Image entity.
func (duo *DirectoryUpdateOne) AddImages(i ...*Image) *DirectoryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return duo.AddImageIDs(ids...)
}

// Mutation returns the DirectoryMutation object of the builder.
func (duo *DirectoryUpdateOne) Mutation() *DirectoryMutation {
	return duo.mutation
}

// ClearParent clears the "parent" edge to the Directory entity.
func (duo *DirectoryUpdateOne) ClearParent() *DirectoryUpdateOne {
	duo.mutation.ClearParent()
	return duo
}

// ClearChildren clears all "children" edges to the Directory entity.
func (duo *DirectoryUpdateOne) ClearChildren() *DirectoryUpdateOne {
	duo.mutation.ClearChildren()
	return duo
}

// RemoveChildIDs removes the "children" edge to Directory entities by IDs.
func (duo *DirectoryUpdateOne) RemoveChildIDs(ids ...int) *DirectoryUpdateOne {
	duo.mutation.RemoveChildIDs(ids...)
	return duo
}

// RemoveChildren removes "children" edges to Directory entities.
func (duo *DirectoryUpdateOne) RemoveChildren(d ...*Directory) *DirectoryUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveChildIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (duo *DirectoryUpdateOne) ClearImages() *DirectoryUpdateOne {
	duo.mutation.ClearImages()
	return duo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (duo *DirectoryUpdateOne) RemoveImageIDs(ids ...int) *DirectoryUpdateOne {
	duo.mutation.RemoveImageIDs(ids...)
	return duo
}

// RemoveImages removes "images" edges to Image entities.
func (duo *DirectoryUpdateOne) RemoveImages(i ...*Image) *DirectoryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return duo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the DirectoryUpdate builder.
func (duo *DirectoryUpdateOne) Where(ps ...predicate.Directory) *DirectoryUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DirectoryUpdateOne) Select(field string, fields ...string) *DirectoryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Directory entity.
func (duo *DirectoryUpdateOne) Save(ctx context.Context) (*Directory, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DirectoryUpdateOne) SaveX(ctx context.Context) *Directory {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DirectoryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DirectoryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DirectoryUpdateOne) check() error {
	if v, ok := duo.mutation.Path(); ok {
		if err := directory.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Directory.path": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Name(); ok {
		if err := directory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Directory.name": %w`, err)}
		}
	}
	return nil
}

func (duo *DirectoryUpdateOne) sqlSave(ctx context.Context) (_node *Directory, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(directory.Table, directory.Columns, sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Directory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, directory.FieldID)
		for _, f := range fields {
			if !directory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != directory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Path(); ok {
		_spec.SetField(directory.FieldPath, field.TypeString, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(directory.FieldName, field.TypeString, value)
	}
	if duo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildrenTable,
			Columns: []string{directory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !duo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildrenTable,
			Columns: []string{directory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildrenTable,
			Columns: []string{directory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(directory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ImagesTable,
			Columns: []string{directory.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !duo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ImagesTable,
			Columns: []string{directory.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ImagesTable,
			Columns: []string{directory.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Directory{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
