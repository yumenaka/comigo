// Code generated by ent, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldModTime holds the string denoting the mod_time field in the database.
	FieldModTime = "mod_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// EdgeDirectory holds the string denoting the directory edge name in mutations.
	EdgeDirectory = "directory"
	// Table holds the table name of the image in the database.
	Table = "images"
	// DirectoryTable is the table that holds the directory relation/edge.
	DirectoryTable = "images"
	// DirectoryInverseTable is the table name for the Directory entity.
	// It exists in this package in order to avoid circular dependency with the "directory" package.
	DirectoryInverseTable = "directories"
	// DirectoryColumn is the table column denoting the directory relation/edge.
	DirectoryColumn = "directory_images"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldPath,
	FieldName,
	FieldSize,
	FieldModTime,
	FieldCreateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"directory_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByModTime orders the results by the mod_time field.
func ByModTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByDirectoryField orders the results by directory field.
func ByDirectoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDirectoryStep(), sql.OrderByField(field, opts...))
	}
}
func newDirectoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DirectoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DirectoryTable, DirectoryColumn),
	)
}
