// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yumenaka/comigo/cmd/image_viewer/ent/directory"
)

// Directory is the model entity for the Directory schema.
type Directory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DirectoryQuery when eager-loading is set.
	Edges              DirectoryEdges `json:"edges"`
	directory_children *int
	selectValues       sql.SelectValues
}

// DirectoryEdges holds the relations/edges for other nodes in the graph.
type DirectoryEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Directory `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Directory `json:"children,omitempty"`
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DirectoryEdges) ParentOrErr() (*Directory, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: directory.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e DirectoryEdges) ChildrenOrErr() ([]*Directory, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e DirectoryEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[2] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Directory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case directory.FieldID:
			values[i] = new(sql.NullInt64)
		case directory.FieldPath, directory.FieldName:
			values[i] = new(sql.NullString)
		case directory.ForeignKeys[0]: // directory_children
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Directory fields.
func (d *Directory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case directory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case directory.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				d.Path = value.String
			}
		case directory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case directory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field directory_children", value)
			} else if value.Valid {
				d.directory_children = new(int)
				*d.directory_children = int(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Directory.
// This includes values selected through modifiers, order, etc.
func (d *Directory) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Directory entity.
func (d *Directory) QueryParent() *DirectoryQuery {
	return NewDirectoryClient(d.config).QueryParent(d)
}

// QueryChildren queries the "children" edge of the Directory entity.
func (d *Directory) QueryChildren() *DirectoryQuery {
	return NewDirectoryClient(d.config).QueryChildren(d)
}

// QueryImages queries the "images" edge of the Directory entity.
func (d *Directory) QueryImages() *ImageQuery {
	return NewDirectoryClient(d.config).QueryImages(d)
}

// Update returns a builder for updating this Directory.
// Note that you need to call Directory.Unwrap() before calling this method if this Directory
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Directory) Update() *DirectoryUpdateOne {
	return NewDirectoryClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Directory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Directory) Unwrap() *Directory {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Directory is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Directory) String() string {
	var builder strings.Builder
	builder.WriteString("Directory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("path=")
	builder.WriteString(d.Path)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Directories is a parsable slice of Directory.
type Directories []*Directory
