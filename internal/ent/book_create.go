// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yumenaka/comigo/internal/ent/book"
	"github.com/yumenaka/comigo/internal/ent/singlepageinfo"
)

// BookCreate is the builder for creating a Book entity.
type BookCreate struct {
	config
	mutation *BookMutation
	hooks    []Hook
}

// SetTitle sets the "Title" field.
func (bc *BookCreate) SetTitle(s string) *BookCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetBookID sets the "BookID" field.
func (bc *BookCreate) SetBookID(s string) *BookCreate {
	bc.mutation.SetBookID(s)
	return bc
}

// SetOwner sets the "Owner" field.
func (bc *BookCreate) SetOwner(s string) *BookCreate {
	bc.mutation.SetOwner(s)
	return bc
}

// SetNillableOwner sets the "Owner" field if the given value is not nil.
func (bc *BookCreate) SetNillableOwner(s *string) *BookCreate {
	if s != nil {
		bc.SetOwner(*s)
	}
	return bc
}

// SetFilePath sets the "FilePath" field.
func (bc *BookCreate) SetFilePath(s string) *BookCreate {
	bc.mutation.SetFilePath(s)
	return bc
}

// SetBookStorePath sets the "BookStorePath" field.
func (bc *BookCreate) SetBookStorePath(s string) *BookCreate {
	bc.mutation.SetBookStorePath(s)
	return bc
}

// SetType sets the "Type" field.
func (bc *BookCreate) SetType(s string) *BookCreate {
	bc.mutation.SetType(s)
	return bc
}

// SetChildBookNum sets the "ChildBookNum" field.
func (bc *BookCreate) SetChildBookNum(i int) *BookCreate {
	bc.mutation.SetChildBookNum(i)
	return bc
}

// SetDepth sets the "Depth" field.
func (bc *BookCreate) SetDepth(i int) *BookCreate {
	bc.mutation.SetDepth(i)
	return bc
}

// SetParentFolder sets the "ParentFolder" field.
func (bc *BookCreate) SetParentFolder(s string) *BookCreate {
	bc.mutation.SetParentFolder(s)
	return bc
}

// SetPageCount sets the "PageCount" field.
func (bc *BookCreate) SetPageCount(i int) *BookCreate {
	bc.mutation.SetPageCount(i)
	return bc
}

// SetSize sets the "Size" field.
func (bc *BookCreate) SetSize(i int64) *BookCreate {
	bc.mutation.SetSize(i)
	return bc
}

// SetAuthors sets the "Authors" field.
func (bc *BookCreate) SetAuthors(s string) *BookCreate {
	bc.mutation.SetAuthors(s)
	return bc
}

// SetISBN sets the "ISBN" field.
func (bc *BookCreate) SetISBN(s string) *BookCreate {
	bc.mutation.SetISBN(s)
	return bc
}

// SetPress sets the "Press" field.
func (bc *BookCreate) SetPress(s string) *BookCreate {
	bc.mutation.SetPress(s)
	return bc
}

// SetPublishedAt sets the "PublishedAt" field.
func (bc *BookCreate) SetPublishedAt(s string) *BookCreate {
	bc.mutation.SetPublishedAt(s)
	return bc
}

// SetExtractPath sets the "ExtractPath" field.
func (bc *BookCreate) SetExtractPath(s string) *BookCreate {
	bc.mutation.SetExtractPath(s)
	return bc
}

// SetModified sets the "Modified" field.
func (bc *BookCreate) SetModified(t time.Time) *BookCreate {
	bc.mutation.SetModified(t)
	return bc
}

// SetNillableModified sets the "Modified" field if the given value is not nil.
func (bc *BookCreate) SetNillableModified(t *time.Time) *BookCreate {
	if t != nil {
		bc.SetModified(*t)
	}
	return bc
}

// SetExtractNum sets the "ExtractNum" field.
func (bc *BookCreate) SetExtractNum(i int) *BookCreate {
	bc.mutation.SetExtractNum(i)
	return bc
}

// SetInitComplete sets the "InitComplete" field.
func (bc *BookCreate) SetInitComplete(b bool) *BookCreate {
	bc.mutation.SetInitComplete(b)
	return bc
}

// SetReadPercent sets the "ReadPercent" field.
func (bc *BookCreate) SetReadPercent(f float64) *BookCreate {
	bc.mutation.SetReadPercent(f)
	return bc
}

// SetNonUTF8Zip sets the "NonUTF8Zip" field.
func (bc *BookCreate) SetNonUTF8Zip(b bool) *BookCreate {
	bc.mutation.SetNonUTF8Zip(b)
	return bc
}

// SetZipTextEncoding sets the "ZipTextEncoding" field.
func (bc *BookCreate) SetZipTextEncoding(s string) *BookCreate {
	bc.mutation.SetZipTextEncoding(s)
	return bc
}

// AddPageInfoIDs adds the "PageInfos" edge to the SinglePageInfo entity by IDs.
func (bc *BookCreate) AddPageInfoIDs(ids ...int) *BookCreate {
	bc.mutation.AddPageInfoIDs(ids...)
	return bc
}

// AddPageInfos adds the "PageInfos" edges to the SinglePageInfo entity.
func (bc *BookCreate) AddPageInfos(s ...*SinglePageInfo) *BookCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bc.AddPageInfoIDs(ids...)
}

// Mutation returns the BookMutation object of the builder.
func (bc *BookCreate) Mutation() *BookMutation {
	return bc.mutation
}

// Save creates the Book in the database.
func (bc *BookCreate) Save(ctx context.Context) (*Book, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookCreate) SaveX(ctx context.Context) *Book {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BookCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BookCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BookCreate) defaults() {
	if _, ok := bc.mutation.Owner(); !ok {
		v := book.DefaultOwner
		bc.mutation.SetOwner(v)
	}
	if _, ok := bc.mutation.Modified(); !ok {
		v := book.DefaultModified()
		bc.mutation.SetModified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BookCreate) check() error {
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "Title", err: errors.New(`ent: missing required field "Book.Title"`)}
	}
	if v, ok := bc.mutation.Title(); ok {
		if err := book.TitleValidator(v); err != nil {
			return &ValidationError{Name: "Title", err: fmt.Errorf(`ent: validator failed for field "Book.Title": %w`, err)}
		}
	}
	if _, ok := bc.mutation.BookID(); !ok {
		return &ValidationError{Name: "BookID", err: errors.New(`ent: missing required field "Book.BookID"`)}
	}
	if _, ok := bc.mutation.Owner(); !ok {
		return &ValidationError{Name: "Owner", err: errors.New(`ent: missing required field "Book.Owner"`)}
	}
	if _, ok := bc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "FilePath", err: errors.New(`ent: missing required field "Book.FilePath"`)}
	}
	if _, ok := bc.mutation.BookStorePath(); !ok {
		return &ValidationError{Name: "BookStorePath", err: errors.New(`ent: missing required field "Book.BookStorePath"`)}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New(`ent: missing required field "Book.Type"`)}
	}
	if _, ok := bc.mutation.ChildBookNum(); !ok {
		return &ValidationError{Name: "ChildBookNum", err: errors.New(`ent: missing required field "Book.ChildBookNum"`)}
	}
	if v, ok := bc.mutation.ChildBookNum(); ok {
		if err := book.ChildBookNumValidator(v); err != nil {
			return &ValidationError{Name: "ChildBookNum", err: fmt.Errorf(`ent: validator failed for field "Book.ChildBookNum": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Depth(); !ok {
		return &ValidationError{Name: "Depth", err: errors.New(`ent: missing required field "Book.Depth"`)}
	}
	if v, ok := bc.mutation.Depth(); ok {
		if err := book.DepthValidator(v); err != nil {
			return &ValidationError{Name: "Depth", err: fmt.Errorf(`ent: validator failed for field "Book.Depth": %w`, err)}
		}
	}
	if _, ok := bc.mutation.ParentFolder(); !ok {
		return &ValidationError{Name: "ParentFolder", err: errors.New(`ent: missing required field "Book.ParentFolder"`)}
	}
	if _, ok := bc.mutation.PageCount(); !ok {
		return &ValidationError{Name: "PageCount", err: errors.New(`ent: missing required field "Book.PageCount"`)}
	}
	if v, ok := bc.mutation.PageCount(); ok {
		if err := book.PageCountValidator(v); err != nil {
			return &ValidationError{Name: "PageCount", err: fmt.Errorf(`ent: validator failed for field "Book.PageCount": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Size(); !ok {
		return &ValidationError{Name: "Size", err: errors.New(`ent: missing required field "Book.Size"`)}
	}
	if _, ok := bc.mutation.Authors(); !ok {
		return &ValidationError{Name: "Authors", err: errors.New(`ent: missing required field "Book.Authors"`)}
	}
	if _, ok := bc.mutation.ISBN(); !ok {
		return &ValidationError{Name: "ISBN", err: errors.New(`ent: missing required field "Book.ISBN"`)}
	}
	if _, ok := bc.mutation.Press(); !ok {
		return &ValidationError{Name: "Press", err: errors.New(`ent: missing required field "Book.Press"`)}
	}
	if _, ok := bc.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "PublishedAt", err: errors.New(`ent: missing required field "Book.PublishedAt"`)}
	}
	if _, ok := bc.mutation.ExtractPath(); !ok {
		return &ValidationError{Name: "ExtractPath", err: errors.New(`ent: missing required field "Book.ExtractPath"`)}
	}
	if _, ok := bc.mutation.Modified(); !ok {
		return &ValidationError{Name: "Modified", err: errors.New(`ent: missing required field "Book.Modified"`)}
	}
	if _, ok := bc.mutation.ExtractNum(); !ok {
		return &ValidationError{Name: "ExtractNum", err: errors.New(`ent: missing required field "Book.ExtractNum"`)}
	}
	if _, ok := bc.mutation.InitComplete(); !ok {
		return &ValidationError{Name: "InitComplete", err: errors.New(`ent: missing required field "Book.InitComplete"`)}
	}
	if _, ok := bc.mutation.ReadPercent(); !ok {
		return &ValidationError{Name: "ReadPercent", err: errors.New(`ent: missing required field "Book.ReadPercent"`)}
	}
	if _, ok := bc.mutation.NonUTF8Zip(); !ok {
		return &ValidationError{Name: "NonUTF8Zip", err: errors.New(`ent: missing required field "Book.NonUTF8Zip"`)}
	}
	if _, ok := bc.mutation.ZipTextEncoding(); !ok {
		return &ValidationError{Name: "ZipTextEncoding", err: errors.New(`ent: missing required field "Book.ZipTextEncoding"`)}
	}
	return nil
}

func (bc *BookCreate) sqlSave(ctx context.Context) (*Book, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BookCreate) createSpec() (*Book, *sqlgraph.CreateSpec) {
	var (
		_node = &Book{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(book.Table, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.BookID(); ok {
		_spec.SetField(book.FieldBookID, field.TypeString, value)
		_node.BookID = value
	}
	if value, ok := bc.mutation.Owner(); ok {
		_spec.SetField(book.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := bc.mutation.FilePath(); ok {
		_spec.SetField(book.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := bc.mutation.BookStorePath(); ok {
		_spec.SetField(book.FieldBookStorePath, field.TypeString, value)
		_node.BookStorePath = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.SetField(book.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := bc.mutation.ChildBookNum(); ok {
		_spec.SetField(book.FieldChildBookNum, field.TypeInt, value)
		_node.ChildBookNum = value
	}
	if value, ok := bc.mutation.Depth(); ok {
		_spec.SetField(book.FieldDepth, field.TypeInt, value)
		_node.Depth = value
	}
	if value, ok := bc.mutation.ParentFolder(); ok {
		_spec.SetField(book.FieldParentFolder, field.TypeString, value)
		_node.ParentFolder = value
	}
	if value, ok := bc.mutation.PageCount(); ok {
		_spec.SetField(book.FieldPageCount, field.TypeInt, value)
		_node.PageCount = value
	}
	if value, ok := bc.mutation.Size(); ok {
		_spec.SetField(book.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := bc.mutation.Authors(); ok {
		_spec.SetField(book.FieldAuthors, field.TypeString, value)
		_node.Authors = value
	}
	if value, ok := bc.mutation.ISBN(); ok {
		_spec.SetField(book.FieldISBN, field.TypeString, value)
		_node.ISBN = value
	}
	if value, ok := bc.mutation.Press(); ok {
		_spec.SetField(book.FieldPress, field.TypeString, value)
		_node.Press = value
	}
	if value, ok := bc.mutation.PublishedAt(); ok {
		_spec.SetField(book.FieldPublishedAt, field.TypeString, value)
		_node.PublishedAt = value
	}
	if value, ok := bc.mutation.ExtractPath(); ok {
		_spec.SetField(book.FieldExtractPath, field.TypeString, value)
		_node.ExtractPath = value
	}
	if value, ok := bc.mutation.Modified(); ok {
		_spec.SetField(book.FieldModified, field.TypeTime, value)
		_node.Modified = value
	}
	if value, ok := bc.mutation.ExtractNum(); ok {
		_spec.SetField(book.FieldExtractNum, field.TypeInt, value)
		_node.ExtractNum = value
	}
	if value, ok := bc.mutation.InitComplete(); ok {
		_spec.SetField(book.FieldInitComplete, field.TypeBool, value)
		_node.InitComplete = value
	}
	if value, ok := bc.mutation.ReadPercent(); ok {
		_spec.SetField(book.FieldReadPercent, field.TypeFloat64, value)
		_node.ReadPercent = value
	}
	if value, ok := bc.mutation.NonUTF8Zip(); ok {
		_spec.SetField(book.FieldNonUTF8Zip, field.TypeBool, value)
		_node.NonUTF8Zip = value
	}
	if value, ok := bc.mutation.ZipTextEncoding(); ok {
		_spec.SetField(book.FieldZipTextEncoding, field.TypeString, value)
		_node.ZipTextEncoding = value
	}
	if nodes := bc.mutation.PageInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.PageInfosTable,
			Columns: []string{book.PageInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BookCreateBulk is the builder for creating many Book entities in bulk.
type BookCreateBulk struct {
	config
	err      error
	builders []*BookCreate
}

// Save creates the Book entities in the database.
func (bcb *BookCreateBulk) Save(ctx context.Context) ([]*Book, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Book, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BookCreateBulk) SaveX(ctx context.Context) []*Book {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BookCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BookCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
