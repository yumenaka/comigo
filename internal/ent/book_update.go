// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yumenaka/comigo/internal/ent/book"
	"github.com/yumenaka/comigo/internal/ent/predicate"
	"github.com/yumenaka/comigo/internal/ent/singlepageinfo"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTitle sets the "Title" field.
func (bu *BookUpdate) SetTitle(s string) *BookUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (bu *BookUpdate) SetNillableTitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetBookID sets the "BookID" field.
func (bu *BookUpdate) SetBookID(s string) *BookUpdate {
	bu.mutation.SetBookID(s)
	return bu
}

// SetNillableBookID sets the "BookID" field if the given value is not nil.
func (bu *BookUpdate) SetNillableBookID(s *string) *BookUpdate {
	if s != nil {
		bu.SetBookID(*s)
	}
	return bu
}

// SetOwner sets the "Owner" field.
func (bu *BookUpdate) SetOwner(s string) *BookUpdate {
	bu.mutation.SetOwner(s)
	return bu
}

// SetNillableOwner sets the "Owner" field if the given value is not nil.
func (bu *BookUpdate) SetNillableOwner(s *string) *BookUpdate {
	if s != nil {
		bu.SetOwner(*s)
	}
	return bu
}

// SetFilePath sets the "FilePath" field.
func (bu *BookUpdate) SetFilePath(s string) *BookUpdate {
	bu.mutation.SetFilePath(s)
	return bu
}

// SetNillableFilePath sets the "FilePath" field if the given value is not nil.
func (bu *BookUpdate) SetNillableFilePath(s *string) *BookUpdate {
	if s != nil {
		bu.SetFilePath(*s)
	}
	return bu
}

// SetBookStorePath sets the "BookStorePath" field.
func (bu *BookUpdate) SetBookStorePath(s string) *BookUpdate {
	bu.mutation.SetBookStorePath(s)
	return bu
}

// SetNillableBookStorePath sets the "BookStorePath" field if the given value is not nil.
func (bu *BookUpdate) SetNillableBookStorePath(s *string) *BookUpdate {
	if s != nil {
		bu.SetBookStorePath(*s)
	}
	return bu
}

// SetType sets the "Type" field.
func (bu *BookUpdate) SetType(s string) *BookUpdate {
	bu.mutation.SetType(s)
	return bu
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (bu *BookUpdate) SetNillableType(s *string) *BookUpdate {
	if s != nil {
		bu.SetType(*s)
	}
	return bu
}

// SetChildBookNum sets the "ChildBookNum" field.
func (bu *BookUpdate) SetChildBookNum(i int) *BookUpdate {
	bu.mutation.ResetChildBookNum()
	bu.mutation.SetChildBookNum(i)
	return bu
}

// SetNillableChildBookNum sets the "ChildBookNum" field if the given value is not nil.
func (bu *BookUpdate) SetNillableChildBookNum(i *int) *BookUpdate {
	if i != nil {
		bu.SetChildBookNum(*i)
	}
	return bu
}

// AddChildBookNum adds i to the "ChildBookNum" field.
func (bu *BookUpdate) AddChildBookNum(i int) *BookUpdate {
	bu.mutation.AddChildBookNum(i)
	return bu
}

// SetDepth sets the "Depth" field.
func (bu *BookUpdate) SetDepth(i int) *BookUpdate {
	bu.mutation.ResetDepth()
	bu.mutation.SetDepth(i)
	return bu
}

// SetNillableDepth sets the "Depth" field if the given value is not nil.
func (bu *BookUpdate) SetNillableDepth(i *int) *BookUpdate {
	if i != nil {
		bu.SetDepth(*i)
	}
	return bu
}

// AddDepth adds i to the "Depth" field.
func (bu *BookUpdate) AddDepth(i int) *BookUpdate {
	bu.mutation.AddDepth(i)
	return bu
}

// SetParentFolder sets the "ParentFolder" field.
func (bu *BookUpdate) SetParentFolder(s string) *BookUpdate {
	bu.mutation.SetParentFolder(s)
	return bu
}

// SetNillableParentFolder sets the "ParentFolder" field if the given value is not nil.
func (bu *BookUpdate) SetNillableParentFolder(s *string) *BookUpdate {
	if s != nil {
		bu.SetParentFolder(*s)
	}
	return bu
}

// SetPageCount sets the "PageCount" field.
func (bu *BookUpdate) SetPageCount(i int) *BookUpdate {
	bu.mutation.ResetPageCount()
	bu.mutation.SetPageCount(i)
	return bu
}

// SetNillablePageCount sets the "PageCount" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePageCount(i *int) *BookUpdate {
	if i != nil {
		bu.SetPageCount(*i)
	}
	return bu
}

// AddPageCount adds i to the "PageCount" field.
func (bu *BookUpdate) AddPageCount(i int) *BookUpdate {
	bu.mutation.AddPageCount(i)
	return bu
}

// SetSize sets the "Size" field.
func (bu *BookUpdate) SetSize(i int64) *BookUpdate {
	bu.mutation.ResetSize()
	bu.mutation.SetSize(i)
	return bu
}

// SetNillableSize sets the "Size" field if the given value is not nil.
func (bu *BookUpdate) SetNillableSize(i *int64) *BookUpdate {
	if i != nil {
		bu.SetSize(*i)
	}
	return bu
}

// AddSize adds i to the "Size" field.
func (bu *BookUpdate) AddSize(i int64) *BookUpdate {
	bu.mutation.AddSize(i)
	return bu
}

// SetAuthors sets the "Authors" field.
func (bu *BookUpdate) SetAuthors(s string) *BookUpdate {
	bu.mutation.SetAuthors(s)
	return bu
}

// SetNillableAuthors sets the "Authors" field if the given value is not nil.
func (bu *BookUpdate) SetNillableAuthors(s *string) *BookUpdate {
	if s != nil {
		bu.SetAuthors(*s)
	}
	return bu
}

// SetISBN sets the "ISBN" field.
func (bu *BookUpdate) SetISBN(s string) *BookUpdate {
	bu.mutation.SetISBN(s)
	return bu
}

// SetNillableISBN sets the "ISBN" field if the given value is not nil.
func (bu *BookUpdate) SetNillableISBN(s *string) *BookUpdate {
	if s != nil {
		bu.SetISBN(*s)
	}
	return bu
}

// SetPress sets the "Press" field.
func (bu *BookUpdate) SetPress(s string) *BookUpdate {
	bu.mutation.SetPress(s)
	return bu
}

// SetNillablePress sets the "Press" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePress(s *string) *BookUpdate {
	if s != nil {
		bu.SetPress(*s)
	}
	return bu
}

// SetPublishedAt sets the "PublishedAt" field.
func (bu *BookUpdate) SetPublishedAt(s string) *BookUpdate {
	bu.mutation.SetPublishedAt(s)
	return bu
}

// SetNillablePublishedAt sets the "PublishedAt" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePublishedAt(s *string) *BookUpdate {
	if s != nil {
		bu.SetPublishedAt(*s)
	}
	return bu
}

// SetExtractPath sets the "ExtractPath" field.
func (bu *BookUpdate) SetExtractPath(s string) *BookUpdate {
	bu.mutation.SetExtractPath(s)
	return bu
}

// SetNillableExtractPath sets the "ExtractPath" field if the given value is not nil.
func (bu *BookUpdate) SetNillableExtractPath(s *string) *BookUpdate {
	if s != nil {
		bu.SetExtractPath(*s)
	}
	return bu
}

// SetModified sets the "Modified" field.
func (bu *BookUpdate) SetModified(t time.Time) *BookUpdate {
	bu.mutation.SetModified(t)
	return bu
}

// SetNillableModified sets the "Modified" field if the given value is not nil.
func (bu *BookUpdate) SetNillableModified(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetModified(*t)
	}
	return bu
}

// SetExtractNum sets the "ExtractNum" field.
func (bu *BookUpdate) SetExtractNum(i int) *BookUpdate {
	bu.mutation.ResetExtractNum()
	bu.mutation.SetExtractNum(i)
	return bu
}

// SetNillableExtractNum sets the "ExtractNum" field if the given value is not nil.
func (bu *BookUpdate) SetNillableExtractNum(i *int) *BookUpdate {
	if i != nil {
		bu.SetExtractNum(*i)
	}
	return bu
}

// AddExtractNum adds i to the "ExtractNum" field.
func (bu *BookUpdate) AddExtractNum(i int) *BookUpdate {
	bu.mutation.AddExtractNum(i)
	return bu
}

// SetInitComplete sets the "InitComplete" field.
func (bu *BookUpdate) SetInitComplete(b bool) *BookUpdate {
	bu.mutation.SetInitComplete(b)
	return bu
}

// SetNillableInitComplete sets the "InitComplete" field if the given value is not nil.
func (bu *BookUpdate) SetNillableInitComplete(b *bool) *BookUpdate {
	if b != nil {
		bu.SetInitComplete(*b)
	}
	return bu
}

// SetReadPercent sets the "ReadPercent" field.
func (bu *BookUpdate) SetReadPercent(f float64) *BookUpdate {
	bu.mutation.ResetReadPercent()
	bu.mutation.SetReadPercent(f)
	return bu
}

// SetNillableReadPercent sets the "ReadPercent" field if the given value is not nil.
func (bu *BookUpdate) SetNillableReadPercent(f *float64) *BookUpdate {
	if f != nil {
		bu.SetReadPercent(*f)
	}
	return bu
}

// AddReadPercent adds f to the "ReadPercent" field.
func (bu *BookUpdate) AddReadPercent(f float64) *BookUpdate {
	bu.mutation.AddReadPercent(f)
	return bu
}

// SetNonUTF8Zip sets the "NonUTF8Zip" field.
func (bu *BookUpdate) SetNonUTF8Zip(b bool) *BookUpdate {
	bu.mutation.SetNonUTF8Zip(b)
	return bu
}

// SetNillableNonUTF8Zip sets the "NonUTF8Zip" field if the given value is not nil.
func (bu *BookUpdate) SetNillableNonUTF8Zip(b *bool) *BookUpdate {
	if b != nil {
		bu.SetNonUTF8Zip(*b)
	}
	return bu
}

// SetZipTextEncoding sets the "ZipTextEncoding" field.
func (bu *BookUpdate) SetZipTextEncoding(s string) *BookUpdate {
	bu.mutation.SetZipTextEncoding(s)
	return bu
}

// SetNillableZipTextEncoding sets the "ZipTextEncoding" field if the given value is not nil.
func (bu *BookUpdate) SetNillableZipTextEncoding(s *string) *BookUpdate {
	if s != nil {
		bu.SetZipTextEncoding(*s)
	}
	return bu
}

// AddPageInfoIDs adds the "PageInfos" edge to the SinglePageInfo entity by IDs.
func (bu *BookUpdate) AddPageInfoIDs(ids ...int) *BookUpdate {
	bu.mutation.AddPageInfoIDs(ids...)
	return bu
}

// AddPageInfos adds the "PageInfos" edges to the SinglePageInfo entity.
func (bu *BookUpdate) AddPageInfos(s ...*SinglePageInfo) *BookUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddPageInfoIDs(ids...)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearPageInfos clears all "PageInfos" edges to the SinglePageInfo entity.
func (bu *BookUpdate) ClearPageInfos() *BookUpdate {
	bu.mutation.ClearPageInfos()
	return bu
}

// RemovePageInfoIDs removes the "PageInfos" edge to SinglePageInfo entities by IDs.
func (bu *BookUpdate) RemovePageInfoIDs(ids ...int) *BookUpdate {
	bu.mutation.RemovePageInfoIDs(ids...)
	return bu
}

// RemovePageInfos removes "PageInfos" edges to SinglePageInfo entities.
func (bu *BookUpdate) RemovePageInfos(s ...*SinglePageInfo) *BookUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemovePageInfoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookUpdate) check() error {
	if v, ok := bu.mutation.Title(); ok {
		if err := book.TitleValidator(v); err != nil {
			return &ValidationError{Name: "Title", err: fmt.Errorf(`ent: validator failed for field "Book.Title": %w`, err)}
		}
	}
	if v, ok := bu.mutation.ChildBookNum(); ok {
		if err := book.ChildBookNumValidator(v); err != nil {
			return &ValidationError{Name: "ChildBookNum", err: fmt.Errorf(`ent: validator failed for field "Book.ChildBookNum": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Depth(); ok {
		if err := book.DepthValidator(v); err != nil {
			return &ValidationError{Name: "Depth", err: fmt.Errorf(`ent: validator failed for field "Book.Depth": %w`, err)}
		}
	}
	if v, ok := bu.mutation.PageCount(); ok {
		if err := book.PageCountValidator(v); err != nil {
			return &ValidationError{Name: "PageCount", err: fmt.Errorf(`ent: validator failed for field "Book.PageCount": %w`, err)}
		}
	}
	return nil
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.BookID(); ok {
		_spec.SetField(book.FieldBookID, field.TypeString, value)
	}
	if value, ok := bu.mutation.Owner(); ok {
		_spec.SetField(book.FieldOwner, field.TypeString, value)
	}
	if value, ok := bu.mutation.FilePath(); ok {
		_spec.SetField(book.FieldFilePath, field.TypeString, value)
	}
	if value, ok := bu.mutation.BookStorePath(); ok {
		_spec.SetField(book.FieldBookStorePath, field.TypeString, value)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(book.FieldType, field.TypeString, value)
	}
	if value, ok := bu.mutation.ChildBookNum(); ok {
		_spec.SetField(book.FieldChildBookNum, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedChildBookNum(); ok {
		_spec.AddField(book.FieldChildBookNum, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Depth(); ok {
		_spec.SetField(book.FieldDepth, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedDepth(); ok {
		_spec.AddField(book.FieldDepth, field.TypeInt, value)
	}
	if value, ok := bu.mutation.ParentFolder(); ok {
		_spec.SetField(book.FieldParentFolder, field.TypeString, value)
	}
	if value, ok := bu.mutation.PageCount(); ok {
		_spec.SetField(book.FieldPageCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedPageCount(); ok {
		_spec.AddField(book.FieldPageCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Size(); ok {
		_spec.SetField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedSize(); ok {
		_spec.AddField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.Authors(); ok {
		_spec.SetField(book.FieldAuthors, field.TypeString, value)
	}
	if value, ok := bu.mutation.ISBN(); ok {
		_spec.SetField(book.FieldISBN, field.TypeString, value)
	}
	if value, ok := bu.mutation.Press(); ok {
		_spec.SetField(book.FieldPress, field.TypeString, value)
	}
	if value, ok := bu.mutation.PublishedAt(); ok {
		_spec.SetField(book.FieldPublishedAt, field.TypeString, value)
	}
	if value, ok := bu.mutation.ExtractPath(); ok {
		_spec.SetField(book.FieldExtractPath, field.TypeString, value)
	}
	if value, ok := bu.mutation.Modified(); ok {
		_spec.SetField(book.FieldModified, field.TypeTime, value)
	}
	if value, ok := bu.mutation.ExtractNum(); ok {
		_spec.SetField(book.FieldExtractNum, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedExtractNum(); ok {
		_spec.AddField(book.FieldExtractNum, field.TypeInt, value)
	}
	if value, ok := bu.mutation.InitComplete(); ok {
		_spec.SetField(book.FieldInitComplete, field.TypeBool, value)
	}
	if value, ok := bu.mutation.ReadPercent(); ok {
		_spec.SetField(book.FieldReadPercent, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedReadPercent(); ok {
		_spec.AddField(book.FieldReadPercent, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.NonUTF8Zip(); ok {
		_spec.SetField(book.FieldNonUTF8Zip, field.TypeBool, value)
	}
	if value, ok := bu.mutation.ZipTextEncoding(); ok {
		_spec.SetField(book.FieldZipTextEncoding, field.TypeString, value)
	}
	if bu.mutation.PageInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.PageInfosTable,
			Columns: []string{book.PageInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedPageInfosIDs(); len(nodes) > 0 && !bu.mutation.PageInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.PageInfosTable,
			Columns: []string{book.PageInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PageInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.PageInfosTable,
			Columns: []string{book.PageInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMutation
}

// SetTitle sets the "Title" field.
func (buo *BookUpdateOne) SetTitle(s string) *BookUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableTitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetBookID sets the "BookID" field.
func (buo *BookUpdateOne) SetBookID(s string) *BookUpdateOne {
	buo.mutation.SetBookID(s)
	return buo
}

// SetNillableBookID sets the "BookID" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableBookID(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetBookID(*s)
	}
	return buo
}

// SetOwner sets the "Owner" field.
func (buo *BookUpdateOne) SetOwner(s string) *BookUpdateOne {
	buo.mutation.SetOwner(s)
	return buo
}

// SetNillableOwner sets the "Owner" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableOwner(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetOwner(*s)
	}
	return buo
}

// SetFilePath sets the "FilePath" field.
func (buo *BookUpdateOne) SetFilePath(s string) *BookUpdateOne {
	buo.mutation.SetFilePath(s)
	return buo
}

// SetNillableFilePath sets the "FilePath" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableFilePath(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetFilePath(*s)
	}
	return buo
}

// SetBookStorePath sets the "BookStorePath" field.
func (buo *BookUpdateOne) SetBookStorePath(s string) *BookUpdateOne {
	buo.mutation.SetBookStorePath(s)
	return buo
}

// SetNillableBookStorePath sets the "BookStorePath" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableBookStorePath(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetBookStorePath(*s)
	}
	return buo
}

// SetType sets the "Type" field.
func (buo *BookUpdateOne) SetType(s string) *BookUpdateOne {
	buo.mutation.SetType(s)
	return buo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableType(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetType(*s)
	}
	return buo
}

// SetChildBookNum sets the "ChildBookNum" field.
func (buo *BookUpdateOne) SetChildBookNum(i int) *BookUpdateOne {
	buo.mutation.ResetChildBookNum()
	buo.mutation.SetChildBookNum(i)
	return buo
}

// SetNillableChildBookNum sets the "ChildBookNum" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableChildBookNum(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetChildBookNum(*i)
	}
	return buo
}

// AddChildBookNum adds i to the "ChildBookNum" field.
func (buo *BookUpdateOne) AddChildBookNum(i int) *BookUpdateOne {
	buo.mutation.AddChildBookNum(i)
	return buo
}

// SetDepth sets the "Depth" field.
func (buo *BookUpdateOne) SetDepth(i int) *BookUpdateOne {
	buo.mutation.ResetDepth()
	buo.mutation.SetDepth(i)
	return buo
}

// SetNillableDepth sets the "Depth" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableDepth(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetDepth(*i)
	}
	return buo
}

// AddDepth adds i to the "Depth" field.
func (buo *BookUpdateOne) AddDepth(i int) *BookUpdateOne {
	buo.mutation.AddDepth(i)
	return buo
}

// SetParentFolder sets the "ParentFolder" field.
func (buo *BookUpdateOne) SetParentFolder(s string) *BookUpdateOne {
	buo.mutation.SetParentFolder(s)
	return buo
}

// SetNillableParentFolder sets the "ParentFolder" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableParentFolder(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetParentFolder(*s)
	}
	return buo
}

// SetPageCount sets the "PageCount" field.
func (buo *BookUpdateOne) SetPageCount(i int) *BookUpdateOne {
	buo.mutation.ResetPageCount()
	buo.mutation.SetPageCount(i)
	return buo
}

// SetNillablePageCount sets the "PageCount" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePageCount(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetPageCount(*i)
	}
	return buo
}

// AddPageCount adds i to the "PageCount" field.
func (buo *BookUpdateOne) AddPageCount(i int) *BookUpdateOne {
	buo.mutation.AddPageCount(i)
	return buo
}

// SetSize sets the "Size" field.
func (buo *BookUpdateOne) SetSize(i int64) *BookUpdateOne {
	buo.mutation.ResetSize()
	buo.mutation.SetSize(i)
	return buo
}

// SetNillableSize sets the "Size" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableSize(i *int64) *BookUpdateOne {
	if i != nil {
		buo.SetSize(*i)
	}
	return buo
}

// AddSize adds i to the "Size" field.
func (buo *BookUpdateOne) AddSize(i int64) *BookUpdateOne {
	buo.mutation.AddSize(i)
	return buo
}

// SetAuthors sets the "Authors" field.
func (buo *BookUpdateOne) SetAuthors(s string) *BookUpdateOne {
	buo.mutation.SetAuthors(s)
	return buo
}

// SetNillableAuthors sets the "Authors" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableAuthors(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetAuthors(*s)
	}
	return buo
}

// SetISBN sets the "ISBN" field.
func (buo *BookUpdateOne) SetISBN(s string) *BookUpdateOne {
	buo.mutation.SetISBN(s)
	return buo
}

// SetNillableISBN sets the "ISBN" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableISBN(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetISBN(*s)
	}
	return buo
}

// SetPress sets the "Press" field.
func (buo *BookUpdateOne) SetPress(s string) *BookUpdateOne {
	buo.mutation.SetPress(s)
	return buo
}

// SetNillablePress sets the "Press" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePress(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPress(*s)
	}
	return buo
}

// SetPublishedAt sets the "PublishedAt" field.
func (buo *BookUpdateOne) SetPublishedAt(s string) *BookUpdateOne {
	buo.mutation.SetPublishedAt(s)
	return buo
}

// SetNillablePublishedAt sets the "PublishedAt" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublishedAt(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPublishedAt(*s)
	}
	return buo
}

// SetExtractPath sets the "ExtractPath" field.
func (buo *BookUpdateOne) SetExtractPath(s string) *BookUpdateOne {
	buo.mutation.SetExtractPath(s)
	return buo
}

// SetNillableExtractPath sets the "ExtractPath" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableExtractPath(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetExtractPath(*s)
	}
	return buo
}

// SetModified sets the "Modified" field.
func (buo *BookUpdateOne) SetModified(t time.Time) *BookUpdateOne {
	buo.mutation.SetModified(t)
	return buo
}

// SetNillableModified sets the "Modified" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableModified(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetModified(*t)
	}
	return buo
}

// SetExtractNum sets the "ExtractNum" field.
func (buo *BookUpdateOne) SetExtractNum(i int) *BookUpdateOne {
	buo.mutation.ResetExtractNum()
	buo.mutation.SetExtractNum(i)
	return buo
}

// SetNillableExtractNum sets the "ExtractNum" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableExtractNum(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetExtractNum(*i)
	}
	return buo
}

// AddExtractNum adds i to the "ExtractNum" field.
func (buo *BookUpdateOne) AddExtractNum(i int) *BookUpdateOne {
	buo.mutation.AddExtractNum(i)
	return buo
}

// SetInitComplete sets the "InitComplete" field.
func (buo *BookUpdateOne) SetInitComplete(b bool) *BookUpdateOne {
	buo.mutation.SetInitComplete(b)
	return buo
}

// SetNillableInitComplete sets the "InitComplete" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableInitComplete(b *bool) *BookUpdateOne {
	if b != nil {
		buo.SetInitComplete(*b)
	}
	return buo
}

// SetReadPercent sets the "ReadPercent" field.
func (buo *BookUpdateOne) SetReadPercent(f float64) *BookUpdateOne {
	buo.mutation.ResetReadPercent()
	buo.mutation.SetReadPercent(f)
	return buo
}

// SetNillableReadPercent sets the "ReadPercent" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableReadPercent(f *float64) *BookUpdateOne {
	if f != nil {
		buo.SetReadPercent(*f)
	}
	return buo
}

// AddReadPercent adds f to the "ReadPercent" field.
func (buo *BookUpdateOne) AddReadPercent(f float64) *BookUpdateOne {
	buo.mutation.AddReadPercent(f)
	return buo
}

// SetNonUTF8Zip sets the "NonUTF8Zip" field.
func (buo *BookUpdateOne) SetNonUTF8Zip(b bool) *BookUpdateOne {
	buo.mutation.SetNonUTF8Zip(b)
	return buo
}

// SetNillableNonUTF8Zip sets the "NonUTF8Zip" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableNonUTF8Zip(b *bool) *BookUpdateOne {
	if b != nil {
		buo.SetNonUTF8Zip(*b)
	}
	return buo
}

// SetZipTextEncoding sets the "ZipTextEncoding" field.
func (buo *BookUpdateOne) SetZipTextEncoding(s string) *BookUpdateOne {
	buo.mutation.SetZipTextEncoding(s)
	return buo
}

// SetNillableZipTextEncoding sets the "ZipTextEncoding" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableZipTextEncoding(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetZipTextEncoding(*s)
	}
	return buo
}

// AddPageInfoIDs adds the "PageInfos" edge to the SinglePageInfo entity by IDs.
func (buo *BookUpdateOne) AddPageInfoIDs(ids ...int) *BookUpdateOne {
	buo.mutation.AddPageInfoIDs(ids...)
	return buo
}

// AddPageInfos adds the "PageInfos" edges to the SinglePageInfo entity.
func (buo *BookUpdateOne) AddPageInfos(s ...*SinglePageInfo) *BookUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddPageInfoIDs(ids...)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearPageInfos clears all "PageInfos" edges to the SinglePageInfo entity.
func (buo *BookUpdateOne) ClearPageInfos() *BookUpdateOne {
	buo.mutation.ClearPageInfos()
	return buo
}

// RemovePageInfoIDs removes the "PageInfos" edge to SinglePageInfo entities by IDs.
func (buo *BookUpdateOne) RemovePageInfoIDs(ids ...int) *BookUpdateOne {
	buo.mutation.RemovePageInfoIDs(ids...)
	return buo
}

// RemovePageInfos removes "PageInfos" edges to SinglePageInfo entities.
func (buo *BookUpdateOne) RemovePageInfos(s ...*SinglePageInfo) *BookUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemovePageInfoIDs(ids...)
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookUpdateOne) check() error {
	if v, ok := buo.mutation.Title(); ok {
		if err := book.TitleValidator(v); err != nil {
			return &ValidationError{Name: "Title", err: fmt.Errorf(`ent: validator failed for field "Book.Title": %w`, err)}
		}
	}
	if v, ok := buo.mutation.ChildBookNum(); ok {
		if err := book.ChildBookNumValidator(v); err != nil {
			return &ValidationError{Name: "ChildBookNum", err: fmt.Errorf(`ent: validator failed for field "Book.ChildBookNum": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Depth(); ok {
		if err := book.DepthValidator(v); err != nil {
			return &ValidationError{Name: "Depth", err: fmt.Errorf(`ent: validator failed for field "Book.Depth": %w`, err)}
		}
	}
	if v, ok := buo.mutation.PageCount(); ok {
		if err := book.PageCountValidator(v); err != nil {
			return &ValidationError{Name: "PageCount", err: fmt.Errorf(`ent: validator failed for field "Book.PageCount": %w`, err)}
		}
	}
	return nil
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.BookID(); ok {
		_spec.SetField(book.FieldBookID, field.TypeString, value)
	}
	if value, ok := buo.mutation.Owner(); ok {
		_spec.SetField(book.FieldOwner, field.TypeString, value)
	}
	if value, ok := buo.mutation.FilePath(); ok {
		_spec.SetField(book.FieldFilePath, field.TypeString, value)
	}
	if value, ok := buo.mutation.BookStorePath(); ok {
		_spec.SetField(book.FieldBookStorePath, field.TypeString, value)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(book.FieldType, field.TypeString, value)
	}
	if value, ok := buo.mutation.ChildBookNum(); ok {
		_spec.SetField(book.FieldChildBookNum, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedChildBookNum(); ok {
		_spec.AddField(book.FieldChildBookNum, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Depth(); ok {
		_spec.SetField(book.FieldDepth, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedDepth(); ok {
		_spec.AddField(book.FieldDepth, field.TypeInt, value)
	}
	if value, ok := buo.mutation.ParentFolder(); ok {
		_spec.SetField(book.FieldParentFolder, field.TypeString, value)
	}
	if value, ok := buo.mutation.PageCount(); ok {
		_spec.SetField(book.FieldPageCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedPageCount(); ok {
		_spec.AddField(book.FieldPageCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Size(); ok {
		_spec.SetField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedSize(); ok {
		_spec.AddField(book.FieldSize, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.Authors(); ok {
		_spec.SetField(book.FieldAuthors, field.TypeString, value)
	}
	if value, ok := buo.mutation.ISBN(); ok {
		_spec.SetField(book.FieldISBN, field.TypeString, value)
	}
	if value, ok := buo.mutation.Press(); ok {
		_spec.SetField(book.FieldPress, field.TypeString, value)
	}
	if value, ok := buo.mutation.PublishedAt(); ok {
		_spec.SetField(book.FieldPublishedAt, field.TypeString, value)
	}
	if value, ok := buo.mutation.ExtractPath(); ok {
		_spec.SetField(book.FieldExtractPath, field.TypeString, value)
	}
	if value, ok := buo.mutation.Modified(); ok {
		_spec.SetField(book.FieldModified, field.TypeTime, value)
	}
	if value, ok := buo.mutation.ExtractNum(); ok {
		_spec.SetField(book.FieldExtractNum, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedExtractNum(); ok {
		_spec.AddField(book.FieldExtractNum, field.TypeInt, value)
	}
	if value, ok := buo.mutation.InitComplete(); ok {
		_spec.SetField(book.FieldInitComplete, field.TypeBool, value)
	}
	if value, ok := buo.mutation.ReadPercent(); ok {
		_spec.SetField(book.FieldReadPercent, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedReadPercent(); ok {
		_spec.AddField(book.FieldReadPercent, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.NonUTF8Zip(); ok {
		_spec.SetField(book.FieldNonUTF8Zip, field.TypeBool, value)
	}
	if value, ok := buo.mutation.ZipTextEncoding(); ok {
		_spec.SetField(book.FieldZipTextEncoding, field.TypeString, value)
	}
	if buo.mutation.PageInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.PageInfosTable,
			Columns: []string{book.PageInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedPageInfosIDs(); len(nodes) > 0 && !buo.mutation.PageInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.PageInfosTable,
			Columns: []string{book.PageInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PageInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   book.PageInfosTable,
			Columns: []string{book.PageInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
