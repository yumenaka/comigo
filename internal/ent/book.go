// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yumenaka/comigo/internal/ent/book"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 书名
	Title string `json:"Title,omitempty"`
	// 书籍ID
	BookID string `json:"BookID,omitempty"`
	// 拥有者
	Owner string `json:"Owner,omitempty"`
	// 文件路径
	FilePath string `json:"FilePath,omitempty"`
	// 书库路径
	BookStorePath string `json:"BookStorePath,omitempty"`
	// 书籍类型
	Type string `json:"Type,omitempty"`
	// ChildBooksNum holds the value of the "ChildBooksNum" field.
	ChildBooksNum int `json:"ChildBooksNum,omitempty"`
	// Depth holds the value of the "Depth" field.
	Depth int `json:"Depth,omitempty"`
	// ParentFolder holds the value of the "ParentFolder" field.
	ParentFolder string `json:"ParentFolder,omitempty"`
	// 总页数
	PageCount int `json:"PageCount,omitempty"`
	// Size holds the value of the "Size" field.
	Size int64 `json:"Size,omitempty"`
	// Authors holds the value of the "Authors" field.
	Authors string `json:"Authors,omitempty"`
	// ISBN holds the value of the "ISBN" field.
	ISBN string `json:"ISBN,omitempty"`
	// Press holds the value of the "Press" field.
	Press string `json:"Press,omitempty"`
	// PublishedAt holds the value of the "PublishedAt" field.
	PublishedAt string `json:"PublishedAt,omitempty"`
	// ExtractPath holds the value of the "ExtractPath" field.
	ExtractPath string `json:"ExtractPath,omitempty"`
	// 创建时间
	Modified time.Time `json:"Modified,omitempty"`
	// ExtractNum holds the value of the "ExtractNum" field.
	ExtractNum int `json:"ExtractNum,omitempty"`
	// InitComplete holds the value of the "InitComplete" field.
	InitComplete bool `json:"InitComplete,omitempty"`
	// ReadPercent holds the value of the "ReadPercent" field.
	ReadPercent float64 `json:"ReadPercent,omitempty"`
	// NonUTF8Zip holds the value of the "NonUTF8Zip" field.
	NonUTF8Zip bool `json:"NonUTF8Zip,omitempty"`
	// ZipTextEncoding holds the value of the "ZipTextEncoding" field.
	ZipTextEncoding string `json:"ZipTextEncoding,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges        BookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// PageInfos holds the value of the PageInfos edge.
	PageInfos []*SinglePageInfo `json:"PageInfos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PageInfosOrErr returns the PageInfos value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) PageInfosOrErr() ([]*SinglePageInfo, error) {
	if e.loadedTypes[0] {
		return e.PageInfos, nil
	}
	return nil, &NotLoadedError{edge: "PageInfos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldInitComplete, book.FieldNonUTF8Zip:
			values[i] = new(sql.NullBool)
		case book.FieldReadPercent:
			values[i] = new(sql.NullFloat64)
		case book.FieldID, book.FieldChildBookNum, book.FieldDepth, book.FieldPageCount, book.FieldSize, book.FieldExtractNum:
			values[i] = new(sql.NullInt64)
		case book.FieldTitle, book.FieldBookID, book.FieldOwner, book.FieldFilePath, book.FieldBookStorePath, book.FieldType, book.FieldParentFolder, book.FieldAuthors, book.FieldISBN, book.FieldPress, book.FieldPublishedAt, book.FieldExtractPath, book.FieldZipTextEncoding:
			values[i] = new(sql.NullString)
		case book.FieldModified:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case book.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case book.FieldBookID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BookID", values[i])
			} else if value.Valid {
				b.BookID = value.String
			}
		case book.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Owner", values[i])
			} else if value.Valid {
				b.Owner = value.String
			}
		case book.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FilePath", values[i])
			} else if value.Valid {
				b.FilePath = value.String
			}
		case book.FieldBookStorePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BookStorePath", values[i])
			} else if value.Valid {
				b.BookStorePath = value.String
			}
		case book.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				b.Type = value.String
			}
		case book.FieldChildBookNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ChildBooksNum", values[i])
			} else if value.Valid {
				b.ChildBooksNum = int(value.Int64)
			}
		case book.FieldDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Depth", values[i])
			} else if value.Valid {
				b.Depth = int(value.Int64)
			}
		case book.FieldParentFolder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ParentFolder", values[i])
			} else if value.Valid {
				b.ParentFolder = value.String
			}
		case book.FieldPageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PageCount", values[i])
			} else if value.Valid {
				b.PageCount = int(value.Int64)
			}
		case book.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Size", values[i])
			} else if value.Valid {
				b.Size = value.Int64
			}
		case book.FieldAuthors:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Authors", values[i])
			} else if value.Valid {
				b.Authors = value.String
			}
		case book.FieldISBN:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ISBN", values[i])
			} else if value.Valid {
				b.ISBN = value.String
			}
		case book.FieldPress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Press", values[i])
			} else if value.Valid {
				b.Press = value.String
			}
		case book.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PublishedAt", values[i])
			} else if value.Valid {
				b.PublishedAt = value.String
			}
		case book.FieldExtractPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExtractPath", values[i])
			} else if value.Valid {
				b.ExtractPath = value.String
			}
		case book.FieldModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Modified", values[i])
			} else if value.Valid {
				b.Modified = value.Time
			}
		case book.FieldExtractNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExtractNum", values[i])
			} else if value.Valid {
				b.ExtractNum = int(value.Int64)
			}
		case book.FieldInitComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field InitComplete", values[i])
			} else if value.Valid {
				b.InitComplete = value.Bool
			}
		case book.FieldReadPercent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ReadPercent", values[i])
			} else if value.Valid {
				b.ReadPercent = value.Float64
			}
		case book.FieldNonUTF8Zip:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field NonUTF8Zip", values[i])
			} else if value.Valid {
				b.NonUTF8Zip = value.Bool
			}
		case book.FieldZipTextEncoding:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ZipTextEncoding", values[i])
			} else if value.Valid {
				b.ZipTextEncoding = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Book.
// This includes values selected through modifiers, order, etc.
func (b *Book) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryPageInfos queries the "PageInfos" edge of the Book entity.
func (b *Book) QueryPageInfos() *SinglePageInfoQuery {
	return NewBookClient(b.config).QueryPageInfos(b)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return NewBookClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("Title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("BookID=")
	builder.WriteString(b.BookID)
	builder.WriteString(", ")
	builder.WriteString("Owner=")
	builder.WriteString(b.Owner)
	builder.WriteString(", ")
	builder.WriteString("FilePath=")
	builder.WriteString(b.FilePath)
	builder.WriteString(", ")
	builder.WriteString("BookStorePath=")
	builder.WriteString(b.BookStorePath)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(b.Type)
	builder.WriteString(", ")
	builder.WriteString("ChildBooksNum=")
	builder.WriteString(fmt.Sprintf("%v", b.ChildBooksNum))
	builder.WriteString(", ")
	builder.WriteString("Depth=")
	builder.WriteString(fmt.Sprintf("%v", b.Depth))
	builder.WriteString(", ")
	builder.WriteString("ParentFolder=")
	builder.WriteString(b.ParentFolder)
	builder.WriteString(", ")
	builder.WriteString("PageCount=")
	builder.WriteString(fmt.Sprintf("%v", b.PageCount))
	builder.WriteString(", ")
	builder.WriteString("Size=")
	builder.WriteString(fmt.Sprintf("%v", b.Size))
	builder.WriteString(", ")
	builder.WriteString("Authors=")
	builder.WriteString(b.Authors)
	builder.WriteString(", ")
	builder.WriteString("ISBN=")
	builder.WriteString(b.ISBN)
	builder.WriteString(", ")
	builder.WriteString("Press=")
	builder.WriteString(b.Press)
	builder.WriteString(", ")
	builder.WriteString("PublishedAt=")
	builder.WriteString(b.PublishedAt)
	builder.WriteString(", ")
	builder.WriteString("ExtractPath=")
	builder.WriteString(b.ExtractPath)
	builder.WriteString(", ")
	builder.WriteString("Modified=")
	builder.WriteString(b.Modified.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ExtractNum=")
	builder.WriteString(fmt.Sprintf("%v", b.ExtractNum))
	builder.WriteString(", ")
	builder.WriteString("InitComplete=")
	builder.WriteString(fmt.Sprintf("%v", b.InitComplete))
	builder.WriteString(", ")
	builder.WriteString("ReadPercent=")
	builder.WriteString(fmt.Sprintf("%v", b.ReadPercent))
	builder.WriteString(", ")
	builder.WriteString("NonUTF8Zip=")
	builder.WriteString(fmt.Sprintf("%v", b.NonUTF8Zip))
	builder.WriteString(", ")
	builder.WriteString("ZipTextEncoding=")
	builder.WriteString(b.ZipTextEncoding)
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book
