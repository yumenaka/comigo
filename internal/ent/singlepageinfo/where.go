// Code generated by ent, DO NOT EDIT.

package singlepageinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yumenaka/comigo/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldID, id))
}

// BookID applies equality check predicate on the "BookID" field. It's identical to BookIDEQ.
func BookID(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBookID, v))
}

// PageNum applies equality check predicate on the "PageNum" field. It's identical to PageNumEQ.
func PageNum(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldPageNum, v))
}

// Path applies equality check predicate on the "Path" field. It's identical to PathEQ.
func Path(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldPath, v))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldName, v))
}

// URL applies equality check predicate on the "Url" field. It's identical to URLEQ.
func URL(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldURL, v))
}

// BlurHash applies equality check predicate on the "BlurHash" field. It's identical to BlurHashEQ.
func BlurHash(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBlurHash, v))
}

// Height applies equality check predicate on the "Height" field. It's identical to HeightEQ.
func Height(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldHeight, v))
}

// Width applies equality check predicate on the "Width" field. It's identical to WidthEQ.
func Width(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldWidth, v))
}

// ModTime applies equality check predicate on the "ModTime" field. It's identical to ModTimeEQ.
func ModTime(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldModTime, v))
}

// Size applies equality check predicate on the "Size" field. It's identical to SizeEQ.
func Size(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldSize, v))
}

// ImgType applies equality check predicate on the "ImgType" field. It's identical to ImgTypeEQ.
func ImgType(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldImgType, v))
}

// BookIDEQ applies the EQ predicate on the "BookID" field.
func BookIDEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBookID, v))
}

// BookIDNEQ applies the NEQ predicate on the "BookID" field.
func BookIDNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldBookID, v))
}

// BookIDIn applies the In predicate on the "BookID" field.
func BookIDIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldBookID, vs...))
}

// BookIDNotIn applies the NotIn predicate on the "BookID" field.
func BookIDNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldBookID, vs...))
}

// BookIDGT applies the GT predicate on the "BookID" field.
func BookIDGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldBookID, v))
}

// BookIDGTE applies the GTE predicate on the "BookID" field.
func BookIDGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldBookID, v))
}

// BookIDLT applies the LT predicate on the "BookID" field.
func BookIDLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldBookID, v))
}

// BookIDLTE applies the LTE predicate on the "BookID" field.
func BookIDLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldBookID, v))
}

// BookIDContains applies the Contains predicate on the "BookID" field.
func BookIDContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldBookID, v))
}

// BookIDHasPrefix applies the HasPrefix predicate on the "BookID" field.
func BookIDHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldBookID, v))
}

// BookIDHasSuffix applies the HasSuffix predicate on the "BookID" field.
func BookIDHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldBookID, v))
}

// BookIDEqualFold applies the EqualFold predicate on the "BookID" field.
func BookIDEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldBookID, v))
}

// BookIDContainsFold applies the ContainsFold predicate on the "BookID" field.
func BookIDContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldBookID, v))
}

// PageNumEQ applies the EQ predicate on the "PageNum" field.
func PageNumEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldPageNum, v))
}

// PageNumNEQ applies the NEQ predicate on the "PageNum" field.
func PageNumNEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldPageNum, v))
}

// PageNumIn applies the In predicate on the "PageNum" field.
func PageNumIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldPageNum, vs...))
}

// PageNumNotIn applies the NotIn predicate on the "PageNum" field.
func PageNumNotIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldPageNum, vs...))
}

// PageNumGT applies the GT predicate on the "PageNum" field.
func PageNumGT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldPageNum, v))
}

// PageNumGTE applies the GTE predicate on the "PageNum" field.
func PageNumGTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldPageNum, v))
}

// PageNumLT applies the LT predicate on the "PageNum" field.
func PageNumLT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldPageNum, v))
}

// PageNumLTE applies the LTE predicate on the "PageNum" field.
func PageNumLTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldPageNum, v))
}

// PathEQ applies the EQ predicate on the "Path" field.
func PathEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "Path" field.
func PathNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "Path" field.
func PathIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "Path" field.
func PathNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "Path" field.
func PathGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "Path" field.
func PathGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "Path" field.
func PathLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "Path" field.
func PathLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "Path" field.
func PathContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "Path" field.
func PathHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "Path" field.
func PathHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "Path" field.
func PathEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "Path" field.
func PathContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldPath, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldName, v))
}

// URLEQ applies the EQ predicate on the "Url" field.
func URLEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "Url" field.
func URLNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "Url" field.
func URLIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "Url" field.
func URLNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "Url" field.
func URLGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "Url" field.
func URLGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "Url" field.
func URLLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "Url" field.
func URLLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "Url" field.
func URLContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "Url" field.
func URLHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "Url" field.
func URLHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "Url" field.
func URLEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "Url" field.
func URLContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldURL, v))
}

// BlurHashEQ applies the EQ predicate on the "BlurHash" field.
func BlurHashEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBlurHash, v))
}

// BlurHashNEQ applies the NEQ predicate on the "BlurHash" field.
func BlurHashNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldBlurHash, v))
}

// BlurHashIn applies the In predicate on the "BlurHash" field.
func BlurHashIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldBlurHash, vs...))
}

// BlurHashNotIn applies the NotIn predicate on the "BlurHash" field.
func BlurHashNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldBlurHash, vs...))
}

// BlurHashGT applies the GT predicate on the "BlurHash" field.
func BlurHashGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldBlurHash, v))
}

// BlurHashGTE applies the GTE predicate on the "BlurHash" field.
func BlurHashGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldBlurHash, v))
}

// BlurHashLT applies the LT predicate on the "BlurHash" field.
func BlurHashLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldBlurHash, v))
}

// BlurHashLTE applies the LTE predicate on the "BlurHash" field.
func BlurHashLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldBlurHash, v))
}

// BlurHashContains applies the Contains predicate on the "BlurHash" field.
func BlurHashContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldBlurHash, v))
}

// BlurHashHasPrefix applies the HasPrefix predicate on the "BlurHash" field.
func BlurHashHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldBlurHash, v))
}

// BlurHashHasSuffix applies the HasSuffix predicate on the "BlurHash" field.
func BlurHashHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldBlurHash, v))
}

// BlurHashEqualFold applies the EqualFold predicate on the "BlurHash" field.
func BlurHashEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldBlurHash, v))
}

// BlurHashContainsFold applies the ContainsFold predicate on the "BlurHash" field.
func BlurHashContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldBlurHash, v))
}

// HeightEQ applies the EQ predicate on the "Height" field.
func HeightEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "Height" field.
func HeightNEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "Height" field.
func HeightIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "Height" field.
func HeightNotIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "Height" field.
func HeightGT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "Height" field.
func HeightGTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "Height" field.
func HeightLT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "Height" field.
func HeightLTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldHeight, v))
}

// WidthEQ applies the EQ predicate on the "Width" field.
func WidthEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "Width" field.
func WidthNEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "Width" field.
func WidthIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "Width" field.
func WidthNotIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "Width" field.
func WidthGT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "Width" field.
func WidthGTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "Width" field.
func WidthLT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "Width" field.
func WidthLTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldWidth, v))
}

// ModTimeEQ applies the EQ predicate on the "ModTime" field.
func ModTimeEQ(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldModTime, v))
}

// ModTimeNEQ applies the NEQ predicate on the "ModTime" field.
func ModTimeNEQ(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldModTime, v))
}

// ModTimeIn applies the In predicate on the "ModTime" field.
func ModTimeIn(vs ...time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldModTime, vs...))
}

// ModTimeNotIn applies the NotIn predicate on the "ModTime" field.
func ModTimeNotIn(vs ...time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldModTime, vs...))
}

// ModTimeGT applies the GT predicate on the "ModTime" field.
func ModTimeGT(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldModTime, v))
}

// ModTimeGTE applies the GTE predicate on the "ModTime" field.
func ModTimeGTE(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldModTime, v))
}

// ModTimeLT applies the LT predicate on the "ModTime" field.
func ModTimeLT(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldModTime, v))
}

// ModTimeLTE applies the LTE predicate on the "ModTime" field.
func ModTimeLTE(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldModTime, v))
}

// SizeEQ applies the EQ predicate on the "Size" field.
func SizeEQ(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "Size" field.
func SizeNEQ(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "Size" field.
func SizeIn(vs ...int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "Size" field.
func SizeNotIn(vs ...int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "Size" field.
func SizeGT(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "Size" field.
func SizeGTE(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "Size" field.
func SizeLT(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "Size" field.
func SizeLTE(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldSize, v))
}

// ImgTypeEQ applies the EQ predicate on the "ImgType" field.
func ImgTypeEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldImgType, v))
}

// ImgTypeNEQ applies the NEQ predicate on the "ImgType" field.
func ImgTypeNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldImgType, v))
}

// ImgTypeIn applies the In predicate on the "ImgType" field.
func ImgTypeIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldImgType, vs...))
}

// ImgTypeNotIn applies the NotIn predicate on the "ImgType" field.
func ImgTypeNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldImgType, vs...))
}

// ImgTypeGT applies the GT predicate on the "ImgType" field.
func ImgTypeGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldImgType, v))
}

// ImgTypeGTE applies the GTE predicate on the "ImgType" field.
func ImgTypeGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldImgType, v))
}

// ImgTypeLT applies the LT predicate on the "ImgType" field.
func ImgTypeLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldImgType, v))
}

// ImgTypeLTE applies the LTE predicate on the "ImgType" field.
func ImgTypeLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldImgType, v))
}

// ImgTypeContains applies the Contains predicate on the "ImgType" field.
func ImgTypeContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldImgType, v))
}

// ImgTypeHasPrefix applies the HasPrefix predicate on the "ImgType" field.
func ImgTypeHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldImgType, v))
}

// ImgTypeHasSuffix applies the HasSuffix predicate on the "ImgType" field.
func ImgTypeHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldImgType, v))
}

// ImgTypeEqualFold applies the EqualFold predicate on the "ImgType" field.
func ImgTypeEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldImgType, v))
}

// ImgTypeContainsFold applies the ContainsFold predicate on the "ImgType" field.
func ImgTypeContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldImgType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SinglePageInfo) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SinglePageInfo) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SinglePageInfo) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.NotPredicates(p))
}
