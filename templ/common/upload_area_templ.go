// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package common

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func UploadArea() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"relative w-full max-w-2xl p-8 bg-white rounded shadow-md\"><!-- 文件选择与拖拽区域 --><div id=\"drop-area\" class=\"px-6 py-24 text-center transition duration-300 border-4 border-gray-300 border-dashed rounded cursor-pointer hover:border-blue-500\"><p class=\"text-gray-500\" x-text=\"i18next.t('drag_or_click_to_upload')\">>将文件拖拽到此处或点击选择文件</p><input type=\"file\" id=\"file-input\" multiple class=\"hidden\"></div><!-- 预览选中文件列表 --><div id=\"preview\" class=\"mt-6\"><h3 class=\"mb-4 text-lg font-semibold\" x-text=\"i18next.t('selected_file')\">选择的文件</h3><ul class=\"divide-y divide-gray-200\" id=\"file-list\"><!-- 动态插入文件项 --></ul></div><!-- 进度条背景 显示与隐藏有过渡效果，不可点击。--><div id=\"progress-bar\" class=\"absolute pointer-events-none top-0 left-0 h-full transition-opacity duration-500 bg-blue-500/30\" style=\"width: 0%;\"></div><!-- 上传按钮 --><button id=\"upload-button\" class=\"w-full py-2 mt-6 text-white bg-blue-500 rounded hover:bg-blue-600 disabled:og-blue-600/50\" disabled x-text=\"i18next.t('upload_file')\">上传文件<p id=\"progress-text\" class=\"mt-2 text-gray-700\"></p></button><!-- 上传结果显示区域 --><div id=\"result\" class=\"mt-4\"></div></div><div class=\"flex-grow bg-gray-400 place-holder\"></div><script>\n\t\t// 获取元素\n\t\tconst dropArea = document.getElementById(\"drop-area\");\n\t\tconst fileInput = document.getElementById(\"file-input\");\n\t\tconst fileList = document.getElementById(\"file-list\");\n\t\tconst uploadButton = document.getElementById(\"upload-button\");\n\t\tconst resultDiv = document.getElementById(\"result\");\n\t\tconst progressBar = document.getElementById(\"progress-bar\");\n\t\t// 保存选中的文件\n\t\tlet filesToUpload = [];\n\t\t// 触发文件选择对话框\n\t\tdropArea.addEventListener(\"click\", () => {\n\t\t\tfileInput.click();\n\t\t});\n\t\t// 处理文件选择\n\t\tfileInput.addEventListener(\"change\", (e) => {\n\t\t\thandleFiles(e.target.files);\n\t\t\tfileInput.value = \"\"; // 重置文件输入\n\t\t});\n\t\t// 处理拖拽事件\n\t\t[\"dragenter\", \"dragover\"].forEach((eventName) => {\n\t\t\tdropArea.addEventListener(\n\t\t\t\teventName,\n\t\t\t\t(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tdropArea.classList.add(\"drag-over\");\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t);\n\t\t});\n\t\t// 取消拖拽样式\n\t\t[\"dragleave\", \"drop\"].forEach((eventName) => {\n\t\t\tdropArea.addEventListener(\n\t\t\t\teventName,\n\t\t\t\t(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tdropArea.classList.remove(\"drag-over\");\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t);\n\t\t});\n\t\t// 处理文件拖拽\n\t\tdropArea.addEventListener(\"drop\", (e) => {\n\t\t\tconst dt = e.dataTransfer;\n\t\t\tconst files = dt.files;\n\t\t\thandleFiles(files);\n\t\t});\n\t\t// 处理选中的文件\n\t\tfunction handleFiles(files) {\n\t\t\tfor (let file of files) {\n\t\t\t\t// 避免重复添加\n\t\t\t\tif (\n\t\t\t\t\t!filesToUpload.some(\n\t\t\t\t\t\t(f) =>\n\t\t\t\t\t\t\tf.name === file.name &&\n\t\t\t\t\t\t\tf.size === file.size &&\n\t\t\t\t\t\t\tf.lastModified === file.lastModified,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tfilesToUpload.push(file);\n\t\t\t\t\taddFileToList(file);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 更新上传按钮状态\n\t\t\tupdateUploadButtonState();\n\t\t}\n\n\t\t// 将文件添加到预览列表\n\t\tfunction addFileToList(file) {\n\t\t\t// 创建文件项\n\t\t\tconst li = document.createElement(\"li\");\n\t\t\tli.className = \"py-2 flex items-center justify-between\";\n\t\t\t// 文件信息\n\t\t\tconst infoDiv = document.createElement(\"div\");\n\t\t\tinfoDiv.className = \"flex items-center\";\n\t\t\t// 如果是图片，显示缩略图\n\t\t\tif (file.type.startsWith(\"image/\")) {\n\t\t\t\tconst img = document.createElement(\"img\");\n\t\t\t\timg.className = \"w-12 h-12 object-cover mr-4 rounded\";\n\t\t\t\timg.src = URL.createObjectURL(file);\n\t\t\t\timg.onload = () => URL.revokeObjectURL(img.src); // 释放内存\n\t\t\t\tinfoDiv.appendChild(img);\n\t\t\t}\n\t\t\t// 选择文件详情\n\t\t\tconst detailsDiv = document.createElement(\"div\");\n\t\t\t// 文件名\n\t\t\tconst fileName = document.createElement(\"p\");\n\t\t\tfileName.className = \"font-medium\";\n\t\t\tfileName.textContent = file.name;\n\t\t\tdetailsDiv.appendChild(fileName);\n\t\t\t// 计算文件大小\n\t\t\tconst fileSize = document.createElement(\"p\");\n\t\t\tfileSize.className = \"text-sm text-gray-500\";\n\t\t\tfileSize.textContent = `${(file.size / 1024).toFixed(2)} KB`;\n\t\t\tif (file.size > 1024 * 1024) {\n\t\t\t\tfileSize.textContent = `${(file.size / 1024 / 1024).toFixed(2)} MB`;\n\t\t\t}\n\t\t\tif (file.size > 1024 * 1024 * 1024) {\n\t\t\t\tfileSize.textContent = `${(file.size / 1024 / 1024 / 1024).toFixed(2)} GB`;\n\t\t\t}\n\t\t\tdetailsDiv.appendChild(fileSize);\n\t\t\t// 文件类型\n\t\t\tinfoDiv.appendChild(detailsDiv);\n\t\t\tli.appendChild(infoDiv);\n\t\t\t// 删除文件按钮\n\t\t\tconst removeBtn = document.createElement(\"button\");\n\t\t\tremoveBtn.className = \"text-red-500 hover:text-red-700\";\n\t\t\tremoveBtn.innerHTML = \"&#10005;\"; // × 符号\n\t\t\tremoveBtn.addEventListener(\"click\", () => {\n\t\t\t\tfilesToUpload = filesToUpload.filter((f) => f !== file);\n\t\t\t\tli.remove();\n\t\t\t\tupdateUploadButtonState();\n\t\t\t});\n\t\t\tli.appendChild(removeBtn);\n\t\t\tfileList.appendChild(li);\n\t\t}\n\t\t// 更新上传按钮的状态\n\t\tfunction updateUploadButtonState() {\n\t\t\tuploadButton.disabled = filesToUpload.length === 0;\n\t\t}\n\t\t// 处理文件上传\n\t\tuploadButton.addEventListener(\"click\", () => {\n\t\t\t// 没有文件不上传\n\t\t\tif (filesToUpload.length === 0) return;\n\t\t\t// 初始化进度条\n\t\t\tprogressBar.style.width = \"0%\";\n\t\t\tprogressBar.style.opacity = \"0.3\";\n\t\t\tuploadButton.textContent = i18next.t(\"upload_file\") + \"0%\";\n\t\t\t// 创建 FormData\n\t\t\tconst formData = new FormData();\n\t\t\tfilesToUpload.forEach((file) => {\n\t\t\t\tformData.append(\"files\", file);\n\t\t\t});\n\t\t\t// 创建 XMLHttpRequest\n\t\t\t// 使用 XMLHttpRequest 来替代 fetch，因为 XMLHttpRequest 提供了上传进度事件，便于实现实时的上传进度显示。\n\t\t\tconst xhr = new XMLHttpRequest();\n\t\t\txhr.open(\"POST\", \"/api/upload\", true);\n\t\t\t// 监听上传进度\n\t\t\txhr.upload.addEventListener(\"progress\", (e) => {\n\t\t\t\tif (e.lengthComputable) {\n\t\t\t\t\tconst percentComplete = (e.loaded / e.total) * 100;\n\t\t\t\t\tprogressBar.style.width = `${percentComplete}%`;\n\t\t\t\t\tuploadButton.textContent =\n\t\t\t\t\t\ti18next.t(\"upload_file\") + `${percentComplete.toFixed(2)}%`;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// 监听请求完成\n\t\t\txhr.onload = function () {\n\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\tconst data = JSON.parse(xhr.responseText);\n\t\t\t\t\tlet filesList = \"\";\n\t\t\t\t\tdata.files.forEach((file) => {\n\t\t\t\t\t\tfilesList += \"<li>\" + file + \"</li>\";\n\t\t\t\t\t});\n\t\t\t\t\tresultDiv.innerHTML =\n\t\t\t\t\t\t'<p class=\"text-green-500 text-lg text-center\">' +\n\t\t\t\t\t\ti18next.t(\"file_uploaded_successfully\") +\n\t\t\t\t\t\t'</p><ul class=\"text-gray-700 list-disc list-inside\">' +\n\t\t\t\t\t\tfilesList +\n\t\t\t\t\t\t\"</ul>\";\n\n\t\t\t\t\t// 提示上传成功\n\t\t\t\t\tshowMessage({\n\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\tfilesToUpload.length +\n\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\ti18next.t(\"file_uploaded_successfully\"),\n\t\t\t\t\t\tbuttons: \"confirm\",\n\t\t\t\t\t\tonConfirm: function () {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\t// 清空文件列表\n\t\t\t\t\tfilesToUpload = [];\n\t\t\t\t\tfileList.innerHTML = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tconst errorData = JSON.parse(xhr.responseText);\n\t\t\t\t\tresultDiv.innerHTML =\n\t\t\t\t\t\t`<p class=\"text-red-500\">` +\n\t\t\t\t\t\ti18next.t(\"upload_failed_network_error\") +\n\t\t\t\t\t\t`</p>`;\n\t\t\t\t}\n\t\t\t\t// 重置上传按钮和进度条\n\t\t\t\tuploadButton.disabled = filesToUpload.length === 0;\n\t\t\t\tuploadButton.textContent = i18next.t(\"upload_file\");\n\t\t\t\t// 隐藏进度条\n\t\t\t\tprogressBar.style.opacity = \"0\";\n\t\t\t};\n\t\t\t// 上传失败: 网络错误\n\t\t\txhr.onerror = function () {\n\t\t\t\tresultDiv.innerHTML =\n\t\t\t\t\t`<p class=\"text-red-500\">` +\n\t\t\t\t\ti18next.t(\"upload_failed_network_error\") +\n\t\t\t\t\t`</p>`;\n\t\t\t\tuploadButton.disabled = filesToUpload.length === 0;\n\t\t\t\tuploadButton.textContent = i18next.t(\"upload_file\");\n\t\t\t\tprogressBar.style.width = \"0%\";\n\t\t\t};\n\t\t\t// 发送请求\n\t\t\tuploadButton.disabled = true;\n\t\t\tuploadButton.textContent = i18next.t(\"uploading\");\n\t\t\txhr.send(formData);\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
