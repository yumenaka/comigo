// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package common

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Toast() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Toast Container --><div id=\"toast-container\" class=\"fixed z-50 space-y-2 top-5\"></div><!-- Toast JavaScript --><script>\n\t\t// 生成随机 ID（用于唯一标识每个 Toast）\n\t\tfunction generateId() {\n\t\t\treturn \"_\" + Math.random().toString(36).substring(2, 9);\n\t\t}\n\n\t\t// 跟踪当前显示的 toast 消息\n\t\tconst activeToasts = [];\n\n\t\t// 创建并显示 Toast\n\t\tfunction showToast(message, type = \"info\") {\n\t\t\t// 检查是否已经存在相同的 toast\n\t\t\tconst isDuplicate = activeToasts.some(\n\t\t\t\t(toast) => toast.message === message && toast.type === type,\n\t\t\t);\n\t\t\t// 如果是重复的 toast，则只在控制台输出\n\t\t\tconsole.log(`Toast (${type}): ${message}`);\n\t\t\tif (isDuplicate) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 获取 Toast 容器和按钮\n\t\t\tconst toastContainer = document.getElementById(\"toast-container\");\n\t\t\tconst showToastBtn = document.getElementById(\"show-toast\");\n\t\t\tconst id = generateId();\n\t\t\t// 设置不同类型的样式\n\t\t\tlet bgColor;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"success\":\n\t\t\t\t\tbgColor = \"bg-green-500\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"error\":\n\t\t\t\t\tbgColor = \"bg-red-500\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"warning\":\n\t\t\t\t\tbgColor = \"bg-yellow-500\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbgColor = \"bg-blue-500\";\n\t\t\t}\n\n\t\t\t// 创建 Toast 元素\n\t\t\tconst toast = document.createElement(\"div\");\n\t\t\ttoast.id = id;\n\t\t\ttoast.className = `flex items-center ${bgColor} text-white px-4 py-3 rounded shadow-lg transition transform duration-300 ease-in-out`;\n\n\t\t\t// Toast 内容\n\t\t\ttoast.innerHTML = `<span class=\"flex-1\">${message}</span> <button class=\"ml-4 ${bgColor} text-white focus:outline-none\">&times;</button>`;\n\n\t\t\t// 添加到 Toast 容器\n\t\t\ttoastContainer.appendChild(toast);\n\n\t\t\t// 将新 toast 添加到活动列表中\n\t\t\tactiveToasts.push({ id, message, type });\n\n\t\t\t// 自动消失的定时器\n\t\t\tconst timeout = setTimeout(() => {\n\t\t\t\tremoveToast(id);\n\t\t\t}, 3000);\n\n\t\t\t// 点击关闭按钮时移除 Toast\n\t\t\ttoast.querySelector(\"button\").addEventListener(\"click\", () => {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\tremoveToast(id);\n\t\t\t});\n\t\t}\n\n\t\t// 移除 Toast\n\t\tfunction removeToast(id) {\n\t\t\tconst toast = document.getElementById(id);\n\t\t\tif (toast) {\n\t\t\t\t// 从活动列表中移除\n\t\t\t\tconst index = activeToasts.findIndex((toast) => toast.id === id);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tactiveToasts.splice(index, 1);\n\t\t\t\t}\n\n\t\t\t\t// 添加淡出动画\n\t\t\t\ttoast.classList.add(\"opacity-0\", \"translate-x-4\");\n\t\t\t\t// 动画完成后从 DOM 中移除\n\t\t\t\ttoast.addEventListener(\"transitionend\", () => {\n\t\t\t\t\ttoast.remove();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
