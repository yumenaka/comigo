package settings

import (
	"github.com/yumenaka/comigo/templ/state"
	"github.com/yumenaka/comigo/templ/common/svg"
	"github.com/yumenaka/comigo/tools/tailscale_plugin"
	"strconv"
)

// RemoteAccessConfig 远程连接配置项
templ RemoteAccessConfig(tsStatus *tailscale_plugin.TailscaleStatus) {
	if tsStatus != nil {
		@templ.JSONScript("tsStatus", tsStatus)
	}
	<form
		id="tailscale_config_form"
		action="/api/submit-tailscale-config"
		method="post"
		class="flex flex-col justify-start w-full px-2 py-2 mx-2 my-4 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		x-data="{
			    	enable_tailscale: true,
			    	tailscale_auth_key: '',
                	tailscale_hostname: '',
                	tailscale_port: '',
                	tailscale_enable_funnel: '',
                	funnel_password_protection: false,
        			nowTailscaleStatus: {
        			    AuthURL: '', BackendState: '', Clients: null, OS: 'unknown', Online: true, FQDN: '', TailscaleIPs: [], Version: ''
        			},
        			isFormChanged:false,
        			init() {
        			    // 初始化数据
                        this.enable_tailscale = this.$el.querySelector('#EnableTailscale').value === 'true';
                        //console.log('Initial enable_tailscale:', this.enable_tailscale);

                        this.tailscale_auth_key = this.$el.querySelector('#TailscaleAuthKey').value? this.$el.querySelector('#TailscaleAuthKey').value: '';
                        //console.log('Initial tailscale_auth_key:', this.tailscale_auth_key);

                        this.tailscale_hostname = this.$el.querySelector('#TailscaleHostname') .value? this.$el.querySelector('#TailscaleHostname') .value: 'comigo';
                        //console.log('Initial tailscale_hostname:', this.tailscale_hostname);

                        this.tailscale_port = this.$el.querySelector('#TailscalePort').value? this.$el.querySelector('#TailscalePort').value: '443';
                        //console.log('Initial tailscale_port:', this.tailscale_port);

                        this.tailscale_enable_funnel = this.$el.querySelector('#FunnelTunnel').value === 'true';
                        //console.log('Initial tailscale_enable_funnel:', this.tailscale_enable_funnel);

                        this.funnel_password_protection = this.$el.querySelector('#FunnelLoginCheck').value === 'true';
                        //console.log('Initial funnel_password_protection:', this.funnel_password_protection);

                        this.nowTailscaleStatus = JSON.parse(document.getElementById('tsStatus').textContent)
                        //console.log('Initial nowTailscaleStatus:', this.nowTailscaleStatus);

        				this.$watch('enable_tailscale', value => {
        				    this.isFormChanged = true; // 启用Tailscale 有变化，表单被修改过
        					//console.log('enable_tailscale changed. :',  value);
        				});
        				this.$watch('tailscale_enable_funnel', value => {
                            this.isFormChanged = true; // 启用Tailscale 有变化，表单被修改过
                            //console.log('tailscale_enable_funnel changed. :',  value);
                       });
        			}}"
	>
		<div x-text={ getTranslations("remote_access") } class="w-full text-center"></div>
		<hr class="my-1 mx-4 h-2 border-gray-600 border-dashed dark:border-gray-200"/>
		<!-- 启用Tailscale -->
		<div id={ "boolConfig_EnableTailscale" } class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400">
			<div x-text={ getTranslations("EnableTailscale") } ></div>
			<!--  如果一个复选框在其表单被提交时没有被选中，就不会有任何代表其未被选中的状态（例如 value=unchecked）的值被提交给服务器——该值根本就没有被提交给服务器！-->
			<!-- 如果你想在复选框未被选中时提交一个默认值，你可以在表单中加入一个具有相同的 name 和 value 的 <input type="hidden"> 字段，它可以由 JavaScript 生成。 -->
			<!-- https://developer.mozilla.org/zh-CN/docs/Web/HTML/Reference/Elements/input/checkbox -->
			<!-- templ 使用变量或模板参数设置布尔属性，请在属性名称后使用问号来表示该属性是布尔值。 -->
			<input
				type="hidden"
				id={ "EnableTailscaleHidden" }
				if  state.ServerConfig.EnableTailscale {
					value="true"
				} else {
					value="false"
				}
			/>
			<label for={ "EnableTailscale" } class="relative h-8 cursor-pointer w-14">
				<input
					type="checkbox"
					id={ "EnableTailscale" }
					name={ "EnableTailscale" }
					x-model="enable_tailscale"
					if  state.ServerConfig.EnableTailscale {
    					value="true"
    					checked
    				} else {
    					value="false"
    				}
					value="true"
					class="sr-only peer"
				/>
				<span class="absolute inset-0 transition bg-gray-300 rounded-full peer-checked:bg-green-500"></span>
				<span class="absolute inset-y-0 w-6 h-6 m-1 transition-all bg-white rounded-full start-0 peer-checked:start-6"></span>
			</label>
			<div x-text={ getTranslations("EnableTailscale_Description") } class="w-full py-1 text-xs text-gray-500"></div>
		</div>
		<!-- Tailscale服务主机名-->
		<div
			id={ "stringConfig_TailscaleHostname" }
			x-show="enable_tailscale"
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		>
			<label x-text={ getTranslations("TailscaleHostname") } for={ "TailscaleHostname" } ></label>
			<input
				id={ "TailscaleHostname" }
				name={ "TailscaleHostname" }
				type="text"
				:placeholder={ getTranslations("TailscaleHostname") }
				value={ state.ServerConfig.TailscaleHostname }
				class="px-2.5 w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
			/>
			<div
				class="w-full py-1 text-xs text-gray-500"
				x-text={ getTranslations("TailscaleHostname_Description") }
			></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Tailscale服务端口号-->
		<div
			id={ "numberConfig_TailscalePort" }
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
			x-show="enable_tailscale"
		>
			<label for={ "TailscalePort" }  x-text={ getTranslations("TailscalePort") }></label>
			<input
				class="px-2.5 w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
				id={ "TailscalePort" }
				name={ "TailscalePort" }
				type="number"
				:placeholder={ getTranslations("TailscalePort") }
				value={ strconv.Itoa(state.ServerConfig.TailscalePort) }
				max={ strconv.Itoa(65535) }
				min={ strconv.Itoa(0) }
			/>
			<div class="w-full py-1 text-xs text-gray-500" x-text={ getTranslations("TailscalePort_Description") }></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Tailscale预授权密钥 -->
		<div
			id={ "stringConfig_TailscaleAuthKey" }
			x-show="enable_tailscale"
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		>
			<label x-text={ getTranslations("TailscaleAuthKey") } for={ "TailscaleAuthKey" } ></label>
			<input
				id={ "TailscaleAuthKey" }
				name={ "TailscaleAuthKey" }
				type="text"
				:placeholder={ getTranslations("TailscaleAuthKey") }
				value={ state.ServerConfig.TailscaleAuthKey }
				class="px-2.5 w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
			/>
			<div
				class="w-full py-1 text-xs text-blue-500 hover:text-blue-600 underline"
			> <a href="https://login.tailscale.com/admin/settings/keys" target="_blank" x-text={ getTranslations("TailscaleAuthKeyDescription") }></a></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Funnel密码保护检查 -->
		<div
			id={ "boolConfig_FunnelLoginCheck" }
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400 relative"
			x-show="enable_tailscale"
		>
			<!-- Funnel ACL 权限未设置时的遮罩层 -->
			<div
				id="funnel_password_protection_overlay"
				class="absolute inset-0 z-10 w-full h-full flex items-center justify-center rounded-md bg-black/20 text-white text-sm"
				if tsStatus != nil {
					if tsStatus.FunnelCapability == "false" {
						style=""
					}
					if tsStatus.FunnelCapability == "true" || tsStatus.FunnelCapability == "unknown" {
						style="display:none;"
					}
				} else {
					style="display:none;"
				}
			></div>
			<div x-text={ getTranslations("FunnelLoginCheck") } ></div>
			<!-- 隐藏input -->
			<input type="hidden" name={ "FunnelLoginCheck" } value="true" x-bind:disabled="funnel_password_protection"/>
			<label for={ "FunnelLoginCheck" } class="relative h-8 cursor-pointer w-14">
				<input
					type="checkbox"
					id={ "FunnelLoginCheck" }
					name={ "FunnelLoginCheck" }
					x-model="funnel_password_protection"
					if  state.ServerConfig.FunnelLoginCheck {
    					value="true"
    					checked
    				} else {
    					value="false"
    				}
					class="sr-only peer"
				/>
				{state.ServerConfig.FunnelLoginCheck}
				<span class="absolute inset-0 transition bg-gray-300 rounded-full peer-checked:bg-green-500"></span>
				<span class="absolute inset-y-0 w-6 h-6 m-1 transition-all bg-white rounded-full start-0 peer-checked:start-6"></span>
			</label>
			<div x-text={ getTranslations("FunnelLoginCheckDescription") } class="w-full py-1 text-xs text-gray-500"></div>
		</div>
		<!-- Funnel模式（公网访问） -->
		<div
			id={ "boolConfig_FunnelTunnel" }
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400 relative"
			x-show="enable_tailscale"
		>
			<!-- Funnel ACL 权限未设置时的遮罩层 -->
			<div
				id="funnel-acl-overlay"
				class="absolute inset-0 z-10 w-full h-full flex items-center justify-center rounded-md bg-black/20 text-white text-sm"
				if tsStatus != nil {
					if tsStatus.FunnelCapability == "false" {
						style=""
					}
					if tsStatus.FunnelCapability == "true" || tsStatus.FunnelCapability == "unknown" {
						style="display:none;"
					}
				} else {
					style="display:none;"
				}
			></div>
			<div x-text={ getTranslations("FunnelTunnel") } ></div>
			<!-- 隐藏input -->
			<input type="hidden" name={ "FunnelTunnel" } value="false" x-bind:disabled="tailscale_enable_funnel"/>
			<label for={ "FunnelTunnel" } class="relative h-8 cursor-pointer w-14">
				<input
					type="checkbox"
					id={ "FunnelTunnel" }
					name={ "FunnelTunnel" }
					x-model="tailscale_enable_funnel"
					if  state.ServerConfig.FunnelTunnel {
    					value="true"
    				} else {
    					value="false"
    				}
					class="sr-only peer"
				/>
				<span class="absolute inset-0 transition bg-gray-300 rounded-full peer-checked:bg-green-500"></span>
				<span class="absolute inset-y-0 w-6 h-6 m-1 transition-all bg-white rounded-full start-0 peer-checked:start-6"></span>
			</label>
			<div x-text={ getTranslations("FunnelTunnel_Description") } class="w-full py-1 text-xs text-gray-500"></div>
		</div>


		<!-- 帮助面板：如何设置Funnel ACL 权限 -->
		<div
			id="funnel-acl-hint"
			x-show="enable_tailscale"
			class="flex flex-col justify-start w-full mx-0 mt-0 mb-2 px-4 py-2 font-semibold items-left bg-base-100 text-base-content text-xs/4 md:text-sm/6 border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
			if tsStatus != nil {
				if tsStatus.FunnelCapability == "false" {
					style=""
				}
				if tsStatus.FunnelCapability == "true" || tsStatus.FunnelCapability == "unknown" {
					style="display:none;"
				}
			} else {
				style="display:none;"
			}
		>
			<p x-text={ getTranslations("funnel_not_set_hint") }>Funnel 功能未设置。需要：</p>
			<ol class="list-decimal ml-5 space-y-1">
				<li><a x-text={ getTranslations("funnel_require_dns_1") } href="https://login.tailscale.com/admin/dns" target="_blank" class="underline">在控制台DNS面板</a>，<span x-text={ getTranslations("funnel_require_dns_2") }>开启MagicDNS功能与HTTPS功能</span></li>
				<li><a x-text={ getTranslations("funnel_require_acl_1") } href="https://login.tailscale.com/admin/acls/file" target="_blank" class="underline">在控制台ACL面板</a><span x-text={ getTranslations("funnel_require_acl_2") }>在Tailscale控制台ACL面板</span><a id="download-funnel-acl-example" href="#" download="tailscale_acl.json" class="underline" x-text={ getTranslations("funnel_require_acl_3") }>点此下载示例JSON文件</a></li>
			    <li x-text={ getTranslations("funnel_require_password_1") }></li>
			</ol>
			<script>
					(function() {
						try {
							var link = document.getElementById('download-funnel-acl-example');
							if (!link) return;
							var jsonText = '{\n  "groups": {\n    "group:funnel":  ["you-email@sample.com"]\n  },\n  "nodeAttrs": [\n    {\n      "target": ["group:funnel"],\n      "attr":   ["funnel"]\n    }\n  ],\n // Other ACL settings\n}\n';
							var blob = new Blob([jsonText], { type: 'application/json;charset=utf-8' });
							var url = URL.createObjectURL(blob);
							link.href = url;
							link.addEventListener('click', function() {
								setTimeout(function() { URL.revokeObjectURL(url); }, 4000);
							});
						} catch (_) {}
					})();
				</script>
		</div>
		<!-- Tailscale状态面板 -->
		@TailscaleStatusPanel(tsStatus)
		<!-- 提交按钮 -->
		<div class="flex flex-col justify-center items-center w-full my-2 z-10">
			<button
				id="tailscale-submit-btn"
				type="button"
				class="min-w-28 px-2 h-10 mx-2 my-0 text-center text-gray-700 transition border border-gray-500 rounded bg-sky-300 active:bg-sky-500 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
				x-text={ getTranslations("submit") }
			>Submit</button>
<script>
(function () {
    const btn = document.getElementById('tailscale-submit-btn');
    if (!btn) return;
    btn.addEventListener('click', function (e) {
        try {
            if (e && typeof e.preventDefault === 'function') e.preventDefault();
            // 在请求期间禁用提交按钮，防止重复提交
            btn.disabled = true;
            const enable = !!(document.getElementById('EnableTailscale') && document.getElementById('EnableTailscale').checked);
            const auth_key = (document.getElementById('TailscaleAuthKey') && document.getElementById('TailscaleAuthKey').value) || '';
            const host = (document.getElementById('TailscaleHostname') && document.getElementById('TailscaleHostname').value) || '';
            const port = (document.getElementById('TailscalePort') && document.getElementById('TailscalePort').value) || '';
            const portNum = parseInt(port, 10);
            const funnel = !!(document.getElementById('FunnelTunnel') && document.getElementById('FunnelTunnel').checked);
            const funnel_password_protection = !!(document.getElementById('FunnelLoginCheck') && document.getElementById('FunnelLoginCheck').checked);
            console.log('Submitting Tailscale config:', { enable, auth_key, host, port: portNum, funnel, funnel_password_protection });
            // 如果页面上存在 id 为 "logout_button" 的元素，则 now_login 为 true，否则为 false。
            const now_login = !!document.getElementById('logout_button');
            if (funnel === true && funnel_password_protection && now_login === false) {
                showMessage({
                    message: i18next.t('funnel_login_check_enabled_but_no_password'),
                    buttons: 'confirm'
                });
                // 恢复按钮可用
                btn.disabled = false;
                return;
            }
            // 构造 JSON 数据
            const payload = {
                EnableTailscale: enable,
                TailscaleAuthKey: auth_key,
                TailscaleHostname: host,
                TailscalePort: isNaN(portNum) ? 0 : portNum,
                FunnelTunnel: funnel,
                FunnelLoginCheck: funnel_password_protection
            };
            fetch('/api/submit-tailscale-config', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(payload)
            }).then(res => {
                if (!res.ok) throw new Error('HTTP ' + res.status);
                return res.json().catch(() => ({}));
            }).then(() => {
                // 提示Tailscale设置已提交
                showMessage({
                    message: i18next.t('tailscale_settings_submitted_check_status'),
                    buttons: 'confirm',
                    onConfirm: function () {
                        // 提交后，定时刷新Tailscale状态面板，最多刷新15次
                        if (typeof UpdateTailscaleStatus === 'function') {
                            let __tsRefreshCount = 0;
                            const __tsRefreshTimer = setInterval(() => {
                                try { UpdateTailscaleStatus(); } catch (_) { }
                                __tsRefreshCount++;
                                if (__tsRefreshCount >= 15) {
                                    clearInterval(__tsRefreshTimer);
                                }
                            }, 1500);
                        }
                    }
                });
            }).catch(err => {
                console.error('submit tailscale config failed:', err);
            }).finally(() => {
                // 无论成功或失败，恢复按钮可用
                btn.disabled = false;
            });
        } catch (err) {
            console.error('submit tailscale config error:', err);
            // JS 执行阶段的异常也要恢复按钮
            btn.disabled = false;
        }
    });
})();
</script>
		</div>
	</form>
}

// Tailscale状态面板
templ TailscaleStatusPanel(tsStatus *tailscale_plugin.TailscaleStatus) {
	<div
		id="tailscale_status_panel"
		x-init="UpdateTailscaleStatus()"
		hx-trigger="load[document.visibilityState === 'visible',enable_tailscale] delay:1s"
		class="flex flex-col justify-start w-full mx-0 my-2 px-4 pt-2 pb-4 font-normal text-base border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
	>
	    <div class="flex flex-row w-full mb-2 justify-center items-center" @click="UpdateTailscaleStatus">
	        <div id="refresh-text" x-text={ getTranslations("tailscale_status") } class="text-center font-semibold"></div>
            <div id="refresh-icon" x-show="!window.location.href.includes('file:///')"  class="flex justify-center items-center w-8 h-8 mx-1 my-0 rounded cursor-pointer">
                 @svg.Refresh()
            </div>
	    </div>
		<table class="table table-auto w-full">
			<tbody>
				<tr id="ts-auth-row" class="border-separate border-b-1 border-gray-500" style="display:none">
					<td class="min-w-24 font-semibold align-top" x-text={ getTranslations("verify_link") }>验证链接</td>
					<td class="align-top">
						<a id="ts-auth-link" class="text-indigo-600 no-underline hover:underline" href={ tsStatus.AuthURL } target="_blank">{ tsStatus.AuthURL }</a>
					</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("service_status") } class="min-w-24 font-semibold">服务状态</td>
					<td id="ts-state">{ tsStatus.BackendState }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("client_count") } class="min-w-24 font-semibold">客户端数</td>
					<td id="ts-clients">{ strconv.Itoa(len(tsStatus.Clients)) }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("host_system") } class="min-w-24 font-semibold">宿主系统</td>
					<td id="ts-os">{ tsStatus.OS }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("connection_status") } class="min-w-24 font-semibold">连接状况</td>
					<td>
						if tsStatus.Online {
							<span id="ts-online" x-text={ getTranslations("connected") }></span>
						}
						if !tsStatus.Online {
							<span id="ts-online" x-text={ getTranslations("not_connected") }></span>
						}
					</td>
				</tr>
				<tr id="ts-funnel-capability-row" class="border-separate border-b-1 border-gray-400" style="display:none">
					<td x-text={ getTranslations("funnel_status") } class="min-w-24 font-semibold">Funnel状态</td>
					if tsStatus.FunnelCapability == "true" {
						<td id="ts-funnel-capability" x-text={ getTranslations("funnel_setup_done") }></td>
					}
					if tsStatus.FunnelCapability == "false" {
						<td id="ts-funnel-capability" x-text={ getTranslations("funnel_setup_not_done") }></td>
					}
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("enable_funnel") } class="min-w-24 font-semibold">Funnel模式</td>
					if state.ServerConfig.FunnelTunnel {
						<td id="ts-funnel-mode" x-text={ getTranslations("enable") }></td>
					}
					if !state.ServerConfig.FunnelTunnel {
						<td id="ts-funnel-mode" x-text={ getTranslations("disable") }></td>
					}
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("ip_address") } class="min-w-24 font-semibold">IP地址</td>
					<td id="ts-ip">{ tsStatus.GetTailscaleIP() }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("service_version") } class="min-w-24 font-semibold">服务版本</td>
					<td id="ts-version">{ tsStatus.Version }</td>
				</tr>
				<tr id="ts-fqdn-row" class="border-separate border-b-1 border-gray-400" style="display:none">
					<td x-text={ getTranslations("read_link") } class="min-w-24 font-semibold">阅读链接</td>
					<td>
						<a id="ts-fqdn-link" class="text-indigo-600 no-underline hover:underline" href={ tsStatus.FQDN } target="_blank">{ tsStatus.FQDN }</a>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
<script>
// 更新Tailscale状态面板
function UpdateTailscaleStatus(e) {
    try {
        if (e && typeof e.preventDefault === 'function') {
            e.preventDefault();
        }
        // 点击刷新时让刷新图标旋转一周（与请求成功与否无关）
        if (e) {
            try {
                var icon = document.getElementById('refresh-icon');
                var text = document.getElementById('tailscale_status_panel');
                if (icon) {
                    if (typeof icon.animate === 'function') {
                        icon.animate(
                            [{ transform: 'rotate(0deg)' }, { transform: 'rotate(360deg)' }],
                            { duration: 800, easing: 'ease-in-out' }
                        );
                    } else {
                        // Fallback: 使用过渡实现一次性旋转
                        var originalTransition = icon.style.transition;
                        var originalTransform = icon.style.transform;
                        icon.style.transition = 'transform 0.8s ease-in-out';
                        // 强制重绘，确保过渡生效
                        icon.getBoundingClientRect();
                        icon.style.transform = 'rotate(360deg)';
                        setTimeout(function () {
                            icon.style.transition = originalTransition;
                            icon.style.transform = originalTransform || '';
                        }, 850);
                    }
                }
                // 文本淡化一次，与图标旋转同步
                if (text) {
                    if (typeof text.animate === 'function') {
                        text.animate(
                            [{ opacity: 1 }, { opacity: 0.4 }, { opacity: 1 }],
                            { duration: 800, easing: 'ease-in-out' }
                        );
                    } else {
                        var originalTextTransition = text.style.transition;
                        var originalOpacity = text.style.opacity;
                        text.style.transition = 'opacity 0.8s ease-in-out';
                        // 强制重绘
                        text.getBoundingClientRect();
                        text.style.opacity = '0.4';
                        setTimeout(function () {
                            text.style.transition = originalTextTransition;
                            text.style.opacity = originalOpacity || '';
                        }, 850);
                    }
                }
            } catch (_) {}
        }
        const panel = document.getElementById('tailscale_status_panel');
        if (!panel) {
            return;
        }
        // 设置文本内容的辅助函数
        const setText = (selector, text) => {
            const el = panel.querySelector(selector);
            if (el) {
                el.textContent = text == null ? '' : String(text);
            }
        };
        const url = '/api/tailscale_status';
        fetch(url, { headers: { 'Accept': 'application/json' } })
            .then(res => {
                if (!res.ok) throw new Error('HTTP ' + res.status);
                return res.json();
            })
            .then(data => {
                // AuthURL row
                const authRow = panel.querySelector('#ts-auth-row');
                if (authRow) {
                    const link = authRow.querySelector('#ts-auth-link');
                    if (data.AuthURL) {
                        authRow.style.display = '';
                        if (link) {
                            link.href = data.AuthURL;
                            link.textContent = data.AuthURL;
                        }
                    } else {
                        authRow.style.display = 'none';
                        if (link) {
                            link.href = '';
                            link.textContent = '';
                        }
                    }
                }
                // Basic fields
                setText('#ts-state', data.BackendState || '');
                let clientsCount = 0;
                if (Array.isArray(data.Clients)) {
                    clientsCount = data.Clients.length;
                } else if (data.Clients && typeof data.Clients === 'object') {
                    try { clientsCount = Object.keys(data.Clients).length; } catch (_) { clientsCount = 0; }
                }
                setText('#ts-clients', clientsCount);
                setText('#ts-os', data.OS || '');
                setText('#ts-online', data.Online ? i18next.t('connected') : i18next.t('not_connected'));
                // IP: show first IPv4 if possible, else first entry
                let ipText = '';
                if (Array.isArray(data.TailscaleIPs) && data.TailscaleIPs.length > 0) {
                    const ipv4 = data.TailscaleIPs.find(x => typeof x === 'string' && x.indexOf(':') === -1);
                    ipText = ipv4 || data.TailscaleIPs[0];
                }
                setText('#ts-ip', ipText);
                setText('#ts-version', data.Version || '');

                // ts-funnel-mode
                const funnelModeEl = panel.querySelector('#ts-funnel-mode');
                if (funnelModeEl) {
                    funnelModeEl.textContent = (document.getElementById('FunnelTunnel').checked) ? i18next.t('enable') : i18next.t('disable');
                }
                // FQDN row/link
                const fqdnRow = panel.querySelector('#ts-fqdn-row');
                const fqdnLink = panel.querySelector('#ts-fqdn-link');
                if (data.FQDN) {
                    if (fqdnRow) fqdnRow.style.display = '';
                    if (fqdnLink) {
                        const portInput = document.getElementById('TailscalePort');
                        const port = portInput ? parseInt(portInput.value, 10) : 0;
                        const isHttps = (port === 443 || document.getElementById('FunnelTunnel').checked);
                        const proto = isHttps ? 'https://' : 'http://';
                        let href = proto + data.FQDN;
                        if (port !== 443 && port !== 80) {
                            href += ':' + port;
                        }
                        //console.log('Setting FQDN link to:', href);
                        fqdnLink.href = href;
                        fqdnLink.textContent = href;
                    }
                } else {
                    if (fqdnRow) fqdnRow.style.display = 'none';
                    if (fqdnLink) { fqdnLink.href = ''; fqdnLink.textContent = ''; }
                }
                // FunnelCapability
                const funnelRow = panel.querySelector('#ts-funnel-capability-row');
                if (funnelRow) {
                    if (data.FunnelCapability) {
                        funnelRow.style.display = '';
                        const funnelCapEl = panel.querySelector('#ts-funnel-capability');
                        if (funnelCapEl) {
                            if (data.FunnelCapability === "true") {
                                funnelCapEl.textContent = i18next.t('funnel_setup_done');
                            }
                            if (data.FunnelCapability === "false") {
                                funnelCapEl.textContent = i18next.t('funnel_setup_not_done');
                            }
                            if (data.FunnelCapability === "unknown") {
                                funnelCapEl.textContent = "???";
                            }
                        }
                    } else {
                        funnelRow.style.display = 'none';
                        const funnelCapEl = panel.querySelector('#ts-funnel-capability');
                        if (funnelCapEl) {
                            funnelCapEl.textContent = '';
                        }
                    }

                    // 控制 Funnel 模块遮罩层显示与否
                    const overlay = document.getElementById('funnel-acl-overlay');
                    if (overlay) {
                        if (data.FunnelCapability === "false") {
                            overlay.style.display = '';
                        }
                        if (data.FunnelCapability === "true" || data.FunnelCapability === "unknown") {
                            overlay.style.display = 'none';
                        }
                    }
                    const enforce_password_overlay = document.getElementById('funnel_password_protection_overlay');
                    if (enforce_password_overlay) {
                        if (data.FunnelCapability === "false") {
                            enforce_password_overlay.style.display = '';
                        }
                        if (data.FunnelCapability === "true" || data.FunnelCapability === "unknown") {
                            enforce_password_overlay.style.display = 'none';
                        }
                    }
                    // 控制 Funnel 提示模块显示与否
                    const hint = document.getElementById('funnel-acl-hint');
                    if (hint) {
                        if (data.FunnelCapability === "false") {
                            hint.style.display = '';
                        }
                        if (data.FunnelCapability === "true" || data.FunnelCapability === "unknown") {
                            hint.style.display = 'none';
                        }
                    }
                }
                // Update embedded JSON for other components if present
                const scriptEl = document.getElementById('tsStatus');
                if (scriptEl) {
                    try { scriptEl.textContent = JSON.stringify(data); } catch (_) { }
                }
            })
            .catch(err => {
                // Optionally report in console; keep UI silent
                console.error('UpdateTailscaleStatus failed:', err);
            });
    } catch (err) {
        console.error('UpdateTailscaleStatus error:', err);
    }
}
</script>
}
