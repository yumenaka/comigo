package settings

import (
	"github.com/yumenaka/comigo/templ/state"
	"github.com/yumenaka/comigo/tools/tailscale_plugin"
	"strconv"
)


// RemoteAccessConfig 远程连接配置项
templ RemoteAccessConfig(tsStatus *tailscale_plugin.TailscaleStatus) {
        if tsStatus != nil {
    		@templ.JSONScript("tsStatus", tsStatus)
    	}
	<form
		id="tailscale_config_form"
		class="flex flex-col justify-start w-full px-2 py-2 mx-2 my-4 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		hx-post="/api/tailscale-config"
		hx-target="#tailscale_status_panel"
		hx-swap="outerHTML"
		onsubmit="return submitTailscaleConfig(event)"
			x-data="{
			    	enable_tailscale: true,
                	tailscale_hostname: '',
                	tailscale_port: '',
                	tailscale_funnel_mode: '',
        			nowTailscaleStatus: {
        			    AuthURL: '', BackendState: '', Clients: null, OS: 'unknown', Online: true, FQDN: '', TailscaleIPs: [], Version: ''
        			},
        			isFormChanged:false,
        			init() {
        			    // checked 表示该复选框是否被默认选中（当页面加载时）。它不表示这个复选框当前是否被选中：如果复选框的状态被改变，这个内容属性不反映这个变化。
                        this.enable_tailscale = this.$el.querySelector('#EnableTailscaleTemp').value === 'true'? true: false;
                        console.log('EnableTailscale:', this.$el.querySelector('#EnableTailscaleTemp'));
                        console.log('Initial enable_tailscale:', this.enable_tailscale);
                        this.tailscale_hostname = this.$el.querySelector('#TailscaleHostname') .value? this.$el.querySelector('#TailscaleHostname') .value: 'comigo';
                        this.tailscale_port = this.$el.querySelector('#TailscalePort').value? this.$el.querySelector('#TailscalePort').value: '443';
                        this.tailscale_funnel_mode = this.$el.querySelector('#TailscaleFunnelMode').checked? this.$el.querySelector('#TailscaleFunnelMode').checked: false;
                        this.nowTailscaleStatus = JSON.parse(document.getElementById('tsStatus').textContent)
        				this.$watch('enable_tailscale', value => {
        				    this.isFormChanged = true; // 启用Tailscale 有变化，表单被修改过
        					console.log('enable_tailscale changed. :',  value);
        				});
        				this.$watch('tailscale_funnel_mode', value => {
                            this.isFormChanged = true; // 启用Tailscale 有变化，表单被修改过
                            console.log('tailscale_funnel_mode changed. :',  value);
                       });
        			},

        			canSave() {
        			    // 没有修改表单，不能保存
        				if (!this.isFormChanged) {
        				    showToast(i18next.t('NoChangesDetected'), 'info');
        					return false;
        				}
        				// 如果启用了 Tailscale，才需要验证相关字段
        				if (this.enable_tailscale) {
        				    // 验证主机名
        				    if (this.tailscale_hostname.trim() === '') {
        				        showToast('Hostname cannot be empty when Tailscale is enabled.', 'error');
        				        return false;
        				    }
        				    // 验证端口
        				    const port = parseInt(this.tailscale_port, 10);
        				    if (isNaN(port) || port < 0 || port > 65535) {
        				        showToast('Port must be a number between 0 and 65535.', 'error');
        				        return false;
        				    }
        				    if (this.tailscale_funnel_mode && (this.tailscale_port != 443 && this.tailscale_port != 8443 && this.tailscale_port != 10000)){
                                showToast('Port must be 443, 8443, or 10000 when Funnel Mode is enabled.', 'error');
                                return false;
                           }
        				}
        				return true;
        			}
        			}"
	>
		<div x-text={ getTranslations("remote_access") } class="w-full text-center"></div>
		<hr class="my-1 mx-4 h-2 border-gray-600 border-dashed dark:border-gray-200"/>
		<!-- 启用Tailscale -->
		<div id={ "boolConfig_EnableTailscale" } class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400">
			<div x-text={ getTranslations("EnableTailscale") } class="w-64"></div>
			<!--  如果一个复选框在其表单被提交时没有被选中，就不会有任何代表其未被选中的状态（例如 value=unchecked）的值被提交给服务器——该值根本就没有被提交给服务器！-->
			<!-- 如果你想在复选框未被选中时提交一个默认值，你可以在表单中加入一个具有相同的 name 和 value 的 <input type="hidden"> 字段，它可以由 JavaScript 生成。 -->
			<!-- https://developer.mozilla.org/zh-CN/docs/Web/HTML/Reference/Elements/input/checkbox -->
			<!-- templ 使用变量或模板参数设置布尔属性，请在属性名称后使用问号来表示该属性是布尔值。 -->
			<input type="hidden" id={ "EnableTailscaleTemp" }
			if  state.ServerConfig.EnableTailscale {
                value="true"
            }  else{
                value="false"
            }
			/>
			<input type="hidden" name={ "EnableTailscale" } value="false"/>
			<label for={ "EnableTailscale" } class="relative h-8 cursor-pointer w-14">
				<input
					type="checkbox"
					id={ "EnableTailscale" }
					name={ "EnableTailscale" }
					x-model="enable_tailscale"
					if state.ServerConfig.EnableTailscale {
					    checked
                    }
                    value="true"
					class="sr-only peer"
				/>
				<span class="absolute inset-0 transition bg-gray-300 rounded-full peer-checked:bg-green-500"></span>
				<span class="absolute inset-y-0 w-6 h-6 m-1 transition-all bg-white rounded-full start-0 peer-checked:start-6"></span>
			</label>
			<div x-text={ getTranslations("EnableTailscale_Description") } class="w-full py-1 text-xs text-gray-500"></div>
		</div>
		<!-- Tailscale服务主机名-->
		<div
			id={ "stringConfig_TailscaleHostname" }
			x-show="enable_tailscale"
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		>
			<label x-text={ getTranslations("TailscaleHostname") } for={ "TailscaleHostname" } class="w-64"></label>
			<input
				id={ "TailscaleHostname" }
				name={ "TailscaleHostname" }
				type="text"
				placeholder={ getTranslations("TailscaleHostname") }
				value={ state.ServerConfig.TailscaleHostname }
				class="px-2.5  w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
			/>
			<div
				class="w-full py-1 text-xs text-gray-500"
				x-text={ getTranslations("TailscaleHostname_Description") }
			></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Tailscale服务端口号-->
		<div
			id={ "numberConfig_TailscalePort" }
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
			x-show="enable_tailscale"
		>
			<label for={ "TailscalePort" } class="w-64" x-text={ getTranslations("TailscalePort") }></label>
			<input
				class="px-2.5 w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
				id={ "TailscalePort" }
				name={ "TailscalePort" }
				type="number"
				placeholder={ getTranslations("TailscalePort") }
				value={ strconv.Itoa(state.ServerConfig.TailscalePort) }
				max={ strconv.Itoa(65535) }
				min={ strconv.Itoa(0) }
			/>
			<div class="w-full py-1 text-xs text-gray-500" x-text={ getTranslations("TailscalePort_Description") }></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Tailscale 启用Funnel模式 -->
		<div
			id={ "boolConfig_TailscaleFunnelMode" }
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
			x-show="enable_tailscale"
		>
			<div x-text={ getTranslations("TailscaleFunnelMode") } class="w-64"></div>
			<!-- 隐藏input -->
			<input type="hidden" name={ "TailscaleFunnelMode" } value="false"/>
			<label for={ "TailscaleFunnelMode" } class="relative h-8 cursor-pointer w-14">
				<input
					type="checkbox"
					id={ "TailscaleFunnelMode" }
					name={ "TailscaleFunnelMode" }
					checked?={ state.ServerConfig.TailscaleFunnelMode }
					class="sr-only peer"
				/>
				<span class="absolute inset-0 transition bg-gray-300 rounded-full peer-checked:bg-green-500"></span>
				<span class="absolute inset-y-0 w-6 h-6 m-1 transition-all bg-white rounded-full start-0 peer-checked:start-6"></span>
			</label>
			<div x-text={ getTranslations("TailscaleFunnelMode_Description") } class="w-full py-1 text-xs text-gray-500"></div>
		</div>
		<!-- Tailscale状态面板 -->
        @TailscaleStatusPanel(tsStatus)
		<!-- 提交按钮 -->
		<div class="flex flex-col justify-center items-center w-full my-2">
			<button
				id="tailscale-submit-btn"
				type="submit"
				class="min-w-28 px-2 h-10 mx-2 my-0 text-center text-gray-700 transition border border-gray-500 rounded bg-sky-300 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
				x-text={ getTranslations("submit") }
			>Submit</button>
			<!-- <div
				class="w-full py-1 text-xs text-center text-gray-500"
				id="tailscale-button-hint"
				x-text="i18next.t('save')"
			></div> -->
		</div>

	</form>

	<script>
	// 全局变量存储表单状态
	let isSubmitting = false;
	const tailscaleStatus = JSON.parse(document.getElementById('tsStatus').textContent)

	// 验证表单设置
	function checkTailscaleSettings() {
		const enableCheckbox = document.getElementById('EnableTailscale');
		const hostnameInput = document.getElementById('TailscaleHostname');
		const portInput = document.getElementById('TailscalePort');
		const funnelCheckbox = document.getElementById('TailscaleFunnelMode');
		
		// 如果启用了 Tailscale，才需要验证相关字段
		if (enableCheckbox && enableCheckbox.checked) {
			// 验证主机名
			if (!hostnameInput || hostnameInput.value.trim() === '') {
				showToast('Hostname cannot be empty when Tailscale is enabled.', 'error');
				return false;
			}
			
			// 验证端口
			const port = parseInt(portInput ? portInput.value : '', 10);
			if (isNaN(port) || port < 0 || port > 65535) {
				showToast('Port must be a number between 0 and 65535.', 'error');
				return false;
			}
			
			// 验证 Funnel 模式端口限制
			if (funnelCheckbox && funnelCheckbox.checked && (port !== 443 && port !== 8443 && port !== 10000)) {
				showToast('Port must be 443, 8443, or 10000 when Funnel Mode is enabled.', 'error');
				return false;
			}
		}
		
		return true;
	}
	
	// 提交 Tailscale 配置
	async function submitTailscaleConfig(event) {
		// 验证表单
		if (!checkTailscaleSettings()) {
			event.preventDefault();
			return false;
		}
		
		// 防止重复提交
		if (isSubmitting) {
			event.preventDefault();
			return false;
		}
		
		isSubmitting = true;
		const submitBtn = event ? event.currentTarget : document.getElementById('tailscale-submit-btn');
		
		if (submitBtn) {
			submitBtn.disabled = true;
			submitBtn.textContent = 'Saving...';
		}
		
		try {
			// 获取表单数据
			const enableCheckbox = document.getElementById('EnableTailscale');
			const hostnameInput = document.getElementById('TailscaleHostname');
			const portInput = document.getElementById('TailscalePort');
			const funnelCheckbox = document.getElementById('TailscaleFunnelMode');
			
			const response = await fetch('/api/tailscale-config', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					enableTailscale: enableCheckbox ? enableCheckbox.checked : false,
					tailscaleHostname: hostnameInput ? hostnameInput.value : '',
					tailscalePort: portInput ? parseInt(portInput.value, 10) : 443,
					tailscaleFunnelMode: funnelCheckbox ? funnelCheckbox.checked : false
				})
			});
			
			const result = await response.json();
			
			if (response.ok && result.success) {
				showToast('Tailscale configuration updated successfully!', 'success');
				// 刷新状态面板
				refreshStatusPanel();
			} else {
				showToast(result.message || 'Failed to update configuration', 'error');
			}
		} catch (error) {
			console.error('Error updating Tailscale config:', error);
			showToast('Network error occurred', 'error');
		} finally {
			isSubmitting = false;
			if (submitBtn) {
				submitBtn.disabled = false;
				submitBtn.textContent = getTranslations('submit');
			}
		}
		
		// 阻止默认表单提交，因为我们已经用 fetch 处理了
		event.preventDefault();
		return false;
	}

	</script>

}

// Tailscale状态面板
templ TailscaleStatusPanel(tsStatus *tailscale_plugin.TailscaleStatus) {

	<div
		id="tailscale_status_panel"
		hx-trigger="load[document.visibilityState === 'visible',enable_tailscale] delay:1s"
		class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-normal text-base border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
	>
		<div x-text={ getTranslations("tailscale_status") } class="w-full text-center font-semibold"></div>
		<table class="table table-auto w-full">
			<tbody>
				if tsStatus.AuthURL !="" {
					<tr class="border-separate border-b-1 border-gray-500">
						<td class="w-32 font-semibold align-top">验证</td>
						<td>
							请点击链接，验证Tailscale:
							<a class="text-indigo-600 no-underline hover:underline" href={ tsStatus.AuthURL } target="_blank">{ tsStatus.AuthURL }</a>
						</td>
					</tr>
				}
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("service_status") } class="w-32 font-semibold">服务状态</td>
					<td>{ tsStatus.BackendState }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("client_count") } class="w-32 font-semibold">客户端数</td>
					<td>{ strconv.Itoa(len(tsStatus.Clients)) }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("host_system") } class="w-32 font-semibold">宿主系统</td>
					<td>{ tsStatus.OS }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("connection_status") } class="w-32 font-semibold">连接状况</td>
					<td>
						if tsStatus.Online {
							已连接
						} else {
							未连接
						}
					</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("funnel_mode") } class="w-32 font-semibold">Funnel模式</td>
					<td>
						if state.ServerConfig.TailscaleFunnelMode {
							已启用
						} else {
							未启用
						}
					</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("ip_address") } class="w-32 font-semibold">IP地址</td>
					<td>{ tsStatus.GetTailscaleIP() }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("service_version") } class="w-32 font-semibold">服务版本</td>
					<td>{ tsStatus.Version }</td>
				</tr>
				<tr x-show={ tsStatus.FQDN != "" } class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("read_link") } class="w-32 font-semibold">阅读链接</td>
					<td>
						if state.ServerConfig.TailscalePort == 443 || state.ServerConfig.TailscalePort == 8443 || state.ServerConfig.TailscalePort == 10000 {
							<a class="text-indigo-600 no-underline hover:underline" href={ "https://" + tsStatus.FQDN } target="_blank">{ "https://"+tsStatus.FQDN }</a>
						} else {
							<a class="text-indigo-600 no-underline hover:underline" href={ "http://" + tsStatus.FQDN } target="_blank">{ "https://"+tsStatus.FQDN }</a>
						}
					</td>
				</tr>
			</tbody>
		</table>
	</div>
}
