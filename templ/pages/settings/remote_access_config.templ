package settings

import (
	"github.com/yumenaka/comigo/templ/state"
	"github.com/yumenaka/comigo/tools/tailscale_plugin"
	"strconv"
)

// RemoteAccessConfig 远程连接配置项
templ RemoteAccessConfig(tsStatus *tailscale_plugin.TailscaleStatus) {
	if tsStatus != nil {
		@templ.JSONScript("tsStatus", tsStatus)
	}
	<form
		id="tailscale_config_form"
		action="/api/submit-tailscale-config"
		method="post"
		class="flex flex-col justify-start w-full px-2 py-2 mx-2 my-4 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		x-data="{
			    	enable_tailscale: true,
			    	tailscale_auth_key: '',
                	tailscale_hostname: '',
                	tailscale_port: '',
                	tailscale_funnel_mode: '',
        			nowTailscaleStatus: {
        			    AuthURL: '', BackendState: '', Clients: null, OS: 'unknown', Online: true, FQDN: '', TailscaleIPs: [], Version: ''
        			},
        			isFormChanged:false,
        			init() {
        			    // checked 表示该复选框是否被默认选中（当页面加载时）。它不表示这个复选框当前是否被选中：如果复选框的状态被改变，这个内容属性不反映这个变化。
                        this.enable_tailscale = this.$el.querySelector('#EnableTailscaleTemp').value === 'true'? true: false;
                        // console.log('Initial enable_tailscale:', this.enable_tailscale);
                        this.tailscale_auth_key = this.$el.querySelector('#TailscaleAuthKey').value? this.$el.querySelector('#TailscaleAuthKey').value: '';
                        this.tailscale_hostname = this.$el.querySelector('#TailscaleHostname') .value? this.$el.querySelector('#TailscaleHostname') .value: 'comigo';
                        this.tailscale_port = this.$el.querySelector('#TailscalePort').value? this.$el.querySelector('#TailscalePort').value: '443';
                        this.tailscale_funnel_mode = this.$el.querySelector('#TailscaleFunnelMode').checked? this.$el.querySelector('#TailscaleFunnelMode').checked: false;
                        this.nowTailscaleStatus = JSON.parse(document.getElementById('tsStatus').textContent)
        				this.$watch('enable_tailscale', value => {
        				    this.isFormChanged = true; // 启用Tailscale 有变化，表单被修改过
        					console.log('enable_tailscale changed. :',  value);
        				});
        				this.$watch('tailscale_funnel_mode', value => {
                            this.isFormChanged = true; // 启用Tailscale 有变化，表单被修改过
                            console.log('tailscale_funnel_mode changed. :',  value);
                       });
        			}}"
	>
		<div x-text={ getTranslations("remote_access") } class="w-full text-center"></div>
		<hr class="my-1 mx-4 h-2 border-gray-600 border-dashed dark:border-gray-200"/>
		<!-- 启用Tailscale -->
		<div id={ "boolConfig_EnableTailscale" } class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400">
			<div x-text={ getTranslations("EnableTailscale") } class="w-64"></div>
			<!--  如果一个复选框在其表单被提交时没有被选中，就不会有任何代表其未被选中的状态（例如 value=unchecked）的值被提交给服务器——该值根本就没有被提交给服务器！-->
			<!-- 如果你想在复选框未被选中时提交一个默认值，你可以在表单中加入一个具有相同的 name 和 value 的 <input type="hidden"> 字段，它可以由 JavaScript 生成。 -->
			<!-- https://developer.mozilla.org/zh-CN/docs/Web/HTML/Reference/Elements/input/checkbox -->
			<!-- templ 使用变量或模板参数设置布尔属性，请在属性名称后使用问号来表示该属性是布尔值。 -->
			<input
				type="hidden"
				id={ "EnableTailscaleTemp" }
				if  state.ServerConfig.EnableTailscale {
					value="true"
				} else {
					value="false"
				}
			/>
			<input type="hidden" name={ "EnableTailscale" } value="false" x-bind:disabled="enable_tailscale"/>
			<label for={ "EnableTailscale" } class="relative h-8 cursor-pointer w-14">
				<input
					type="checkbox"
					id={ "EnableTailscale" }
					name={ "EnableTailscale" }
					x-model="enable_tailscale"
					if state.ServerConfig.EnableTailscale {
						checked
					}
					value="true"
					class="sr-only peer"
				/>
				<span class="absolute inset-0 transition bg-gray-300 rounded-full peer-checked:bg-green-500"></span>
				<span class="absolute inset-y-0 w-6 h-6 m-1 transition-all bg-white rounded-full start-0 peer-checked:start-6"></span>
			</label>
			<div x-text={ getTranslations("EnableTailscale_Description") } class="w-full py-1 text-xs text-gray-500"></div>
		</div>
		<!-- Tailscale服务主机名-->
		<div
			id={ "stringConfig_TailscaleHostname" }
			x-show="enable_tailscale"
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		>
			<label x-text={ getTranslations("TailscaleHostname") } for={ "TailscaleHostname" } class="w-64"></label>
			<input
				id={ "TailscaleHostname" }
				name={ "TailscaleHostname" }
				type="text"
				:placeholder={ getTranslations("TailscaleHostname") }
				value={ state.ServerConfig.TailscaleHostname }
				class="px-2.5 w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
			/>
			<div
				class="w-full py-1 text-xs text-gray-500"
				x-text={ getTranslations("TailscaleHostname_Description") }
			></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Tailscale服务端口号-->
		<div
			id={ "numberConfig_TailscalePort" }
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
			x-show="enable_tailscale"
		>
			<label for={ "TailscalePort" } class="w-64" x-text={ getTranslations("TailscalePort") }></label>
			<input
				class="px-2.5 w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
				id={ "TailscalePort" }
				name={ "TailscalePort" }
				type="number"
				placeholder={ getTranslations("TailscalePort") }
				value={ strconv.Itoa(state.ServerConfig.TailscalePort) }
				max={ strconv.Itoa(65535) }
				min={ strconv.Itoa(0) }
			/>
			<div class="w-full py-1 text-xs text-gray-500" x-text={ getTranslations("TailscalePort_Description") }></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Tailscale 启用Funnel模式 -->
		<div
			id={ "boolConfig_TailscaleFunnelMode" }
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
			x-show="enable_tailscale"
		>
			<div x-text={ getTranslations("TailscaleFunnelMode") } class="w-64"></div>
			<!-- 隐藏input -->
			<input type="hidden" name={ "TailscaleFunnelMode" } value="false" x-bind:disabled="tailscale_funnel_mode"/>
			<label for={ "TailscaleFunnelMode" } class="relative h-8 cursor-pointer w-14">
				<input
					type="checkbox"
					id={ "TailscaleFunnelMode" }
					name={ "TailscaleFunnelMode" }
					x-model="tailscale_funnel_mode"
					checked?={ state.ServerConfig.TailscaleFunnelMode }
					value="true"
					class="sr-only peer"
				/>
				<span class="absolute inset-0 transition bg-gray-300 rounded-full peer-checked:bg-green-500"></span>
				<span class="absolute inset-y-0 w-6 h-6 m-1 transition-all bg-white rounded-full start-0 peer-checked:start-6"></span>
			</label>
			<div x-text={ getTranslations("TailscaleFunnelMode_Description") } class="w-full py-1 text-xs text-gray-500"></div>
		</div>
		<!-- Tailscale预授权密钥 -->
		<div
			id={ "stringConfig_TailscaleAuthKey" }
			x-show="enable_tailscale"
			class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
		>
			<label x-text={ getTranslations("TailscaleAuthKey") } for={ "TailscaleAuthKey" } class="w-64"></label>
			<input
				id={ "TailscaleAuthKey" }
				name={ "TailscaleAuthKey" }
				type="text"
				:placeholder={ getTranslations("TailscaleAuthKey") }
				value={ state.ServerConfig.TailscaleAuthKey }
				class="px-2.5 w-64 rounded-md border-gray-400 py-2.5 pe-10 shadow-sm sm:text-sm"
			/>
			<div
				class="w-full py-1 text-xs text-gray-500"
				x-text={ getTranslations("TailscaleAuthKeyDescription") }
			></div>
			<div class="bg-red-600"></div>
		</div>
		<!-- Tailscale状态面板 -->
		@TailscaleStatusPanel(tsStatus)
		<!-- 提交按钮 -->
		<div class="flex flex-col justify-center items-center w-full my-2">
			<button
				id="tailscale-submit-btn"
				type="button"
				class="min-w-28 px-2 h-10 mx-2 my-0 text-center text-gray-700 transition border border-gray-500 rounded bg-sky-300 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
				x-text={ getTranslations("submit") }
			>Submit</button>
			<script>
				(function() {
					const btn = document.getElementById('tailscale-submit-btn');
					if (!btn) return;
					btn.addEventListener('click', function(e) {
						try {
							if (e && typeof e.preventDefault === 'function') e.preventDefault();
							const enable = (document.getElementById('EnableTailscale') && document.getElementById('EnableTailscale').checked) ? 'true' : 'false';
							const auth_key = (document.getElementById('TailscaleAuthKey') && document.getElementById('TailscaleAuthKey').value) || '';
							const host = (document.getElementById('TailscaleHostname') && document.getElementById('TailscaleHostname').value) || '';
							const port = (document.getElementById('TailscalePort') && document.getElementById('TailscalePort').value) || '';
							const funnel = (document.getElementById('TailscaleFunnelMode') && document.getElementById('TailscaleFunnelMode').checked) ? 'true' : 'false';

							const params = new URLSearchParams();
							params.set('EnableTailscale', enable);
							params.set('TailscaleAuthKey', auth_key);
							params.set('TailscaleHostname', host);
							params.set('TailscalePort', port);
							params.set('TailscaleFunnelMode', funnel);

							fetch('/api/submit-tailscale-config', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
									'Accept': 'application/json'
								},
								body: params.toString()
							}).then(res => {
								if (!res.ok) throw new Error('HTTP ' + res.status);
								return res.json().catch(() => ({}));
							}).then(() => {
								if (typeof UpdateTailscaleStatus === 'function') {
									UpdateTailscaleStatus();
								}
							}).catch(err => {
								console.error('submit tailscale config failed:', err);
							});
						} catch (err) {
							console.error('submit tailscale config error:', err);
						}
					});
				})();
			</script>
		</div>
	</form>
}

// Tailscale状态面板
templ TailscaleStatusPanel(tsStatus *tailscale_plugin.TailscaleStatus) {
	<div
		id="tailscale_status_panel"
		@click="UpdateTailscaleStatus"
		x-init="UpdateTailscaleStatus()"
		hx-trigger="load[document.visibilityState === 'visible',enable_tailscale] delay:1s"
		class="flex flex-col justify-start w-full mx-0 my-2 px-4 py-2 font-normal text-base border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400"
	>
		<div x-text={ getTranslations("tailscale_status") } class="w-full text-center font-semibold"></div>
		<table class="table table-auto w-full">
			<tbody>
				<tr id="ts-auth-row" class="border-separate border-b-1 border-gray-500" style="display:none">
					<td class="w-32 font-semibold align-top">验证</td>
					<td>
						请点击链接，验证Tailscale:
						<a id="ts-auth-link" class="text-indigo-600 no-underline hover:underline" href={ tsStatus.AuthURL } target="_blank">{ tsStatus.AuthURL }</a>
					</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("service_status") } class="w-32 font-semibold">服务状态</td>
					<td id="ts-state">{ tsStatus.BackendState }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("client_count") } class="w-32 font-semibold">客户端数</td>
					<td id="ts-clients">{ strconv.Itoa(len(tsStatus.Clients)) }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("host_system") } class="w-32 font-semibold">宿主系统</td>
					<td id="ts-os">{ tsStatus.OS }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("connection_status") } class="w-32 font-semibold">连接状况</td>
					<td>
						<span id="ts-online">
							if tsStatus.Online {
								已连接
							} else {
								未连接
							}
						</span>
					</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("funnel_mode") } class="w-32 font-semibold">Funnel模式</td>
					<td id="ts-funnel-mode">
						if state.ServerConfig.TailscaleFunnelMode {
							已启用
						} else {
							未启用
						}
					</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("ip_address") } class="w-32 font-semibold">IP地址</td>
					<td id="ts-ip">{ tsStatus.GetTailscaleIP() }</td>
				</tr>
				<tr class="border-separate border-b-1 border-gray-400">
					<td x-text={ getTranslations("service_version") } class="w-32 font-semibold">服务版本</td>
					<td id="ts-version">{ tsStatus.Version }</td>
				</tr>
				<tr id="ts-fqdn-row" class="border-separate border-b-1 border-gray-400" style="display:none">
					<td x-text={ getTranslations("read_link") } class="w-32 font-semibold">阅读链接</td>
					<td>
						if state.ServerConfig.TailscalePort == 443 || state.ServerConfig.TailscalePort == 8443 || state.ServerConfig.TailscalePort == 10000 {
							<a id="ts-fqdn-link" class="text-indigo-600 no-underline hover:underline" href={ "https://" + tsStatus.FQDN } target="_blank">{ "https://"+tsStatus.FQDN }</a>
						} else {
							<a id="ts-fqdn-link" class="text-indigo-600 no-underline hover:underline" href={ "http://" + tsStatus.FQDN } target="_blank">{ "https://"+tsStatus.FQDN }</a>
						}
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	<script>
	       // 更新Tailscale状态面板
	       function UpdateTailscaleStatus(e) {
	           try {
	               if (e && typeof e.preventDefault === 'function') {
	                   e.preventDefault();
	               }
	               const panel = document.getElementById('tailscale_status_panel');
	               if (!panel) {
	                   return;
	               }
	               // 设置文本内容的辅助函数
	               const setText = (selector, text) => {
	                   const el = panel.querySelector(selector);
	                   if (el) {
	                       el.textContent = text == null ? '' : String(text);
	                   }
	               };
	               const url = '/api/tailscale_status';
	               fetch(url, { headers: { 'Accept': 'application/json' } })
	                   .then(res => {
	                       if (!res.ok) throw new Error('HTTP ' + res.status);
	                       return res.json();
	                   })
	                   .then(data => {
	                       // AuthURL row
	                       const authRow = panel.querySelector('#ts-auth-row');
	                       if (authRow) {
	                           const link = authRow.querySelector('#ts-auth-link');
	                           if (data.AuthURL) {
	                               authRow.style.display = '';
	                               if (link) {
	                                   link.href = data.AuthURL;
	                                   link.textContent = data.AuthURL;
	                               }
	                           } else {
	                               authRow.style.display = 'none';
	                               if (link) {
	                                   link.href = '';
	                                   link.textContent = '';
	                               }
	                           }
	                       }
	                       // Basic fields
	                       setText('#ts-state', data.BackendState || '');
	                       let clientsCount = 0;
	                       if (Array.isArray(data.Clients)) {
	                           clientsCount = data.Clients.length;
	                       } else if (data.Clients && typeof data.Clients === 'object') {
	                           try { clientsCount = Object.keys(data.Clients).length; } catch (_) { clientsCount = 0; }
	                       }
	                       setText('#ts-clients', clientsCount);
	                       setText('#ts-os', data.OS || '');
	                       setText('#ts-online', data.Online ? '已连接' : '未连接');
	                       // IP: show first IPv4 if possible, else first entry
	                       let ipText = '';
	                       if (Array.isArray(data.TailscaleIPs) && data.TailscaleIPs.length > 0) {
	                           const ipv4 = data.TailscaleIPs.find(x => typeof x === 'string' && x.indexOf(':') === -1);
	                           ipText = ipv4 || data.TailscaleIPs[0];
	                       }
	                       setText('#ts-ip', ipText);
	                       setText('#ts-version', data.Version || '');
	                       // FQDN row/link
	                       const fqdnRow = panel.querySelector('#ts-fqdn-row');
	                       const fqdnLink = panel.querySelector('#ts-fqdn-link');
	                       if (data.FQDN) {
	                           if (fqdnRow) fqdnRow.style.display = '';
	                           if (fqdnLink) {
	                               const portInput = document.getElementById('TailscalePort');
	                               const port = portInput ? parseInt(portInput.value, 10) : 0;
	                               const isHttps = (port === 443 || port === 8443 || port === 10000);
	                               const proto = isHttps ? 'https' : 'http';
	                               const href = proto + '://' + data.FQDN;
	                               fqdnLink.href = href;
	                               fqdnLink.textContent = href;
	                           }
	                       } else {
	                           if (fqdnRow) fqdnRow.style.display = 'none';
	                           if (fqdnLink) { fqdnLink.href = ''; fqdnLink.textContent = ''; }
	                       }
	                       // ts-funnel-mode
	                       const funnelModeEl = panel.querySelector('#ts-funnel-mode');
	                       if (funnelModeEl) {
	                           funnelModeEl.textContent = (document.getElementById('TailscaleFunnelMode').checked) ? i18next.t('enable') : i18next.t('disable') ;
                            }
	                       // Update embedded JSON for other components if present
	                       const scriptEl = document.getElementById('tsStatus');
	                       if (scriptEl) {
	                           try { scriptEl.textContent = JSON.stringify(data); } catch (_) {}
	                       }
	                   })
	                   .catch(err => {
	                       // Optionally report in console; keep UI silent
	                       console.error('UpdateTailscaleStatus failed:', err);
	                   });
	           } catch (err) {
	               console.error('UpdateTailscaleStatus error:', err);
	           }
	       }
    </script>
}
