// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package shelf

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/labstack/echo/v4"
	"github.com/yumenaka/comigo/templ/pages/settings"
	"github.com/yumenaka/comigo/templ/state"
)

func MainArea(c echo.Context, s *state.GlobalState) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- 显示书架 -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if s.GetAllBookNum() != 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- 有的颜色模板只有base-100 ，没有颜色更深的 base-200 base-300 --> <div x-data class=\"flex flex-row flex-1 w-full h-full bg-base-100\" :class=\"(theme.toString() ===&#39;light&#39;||theme.toString() ===&#39;dark&#39;||theme.toString() ===&#39;retro&#39;||theme.toString() ===&#39;lofi&#39;||theme.toString() ===&#39;nord&#39;) ? ($store.global.bgPattern !== &#39;none&#39;?$store.global.bgPattern+&#39; bg-base-300&#39;:&#39;bg-base-300&#39;):($store.global.bgPattern !== &#39;none&#39;?$store.global.bgPattern:&#39;&#39;)\"><div id=\"book-shelf\" class=\"flex flex-row flex-wrap content-start justify-center flex-1 w-full h-full text-base-content\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, book := range s.ShelfBookList.BookInfos {
				templ_7745c5c3_Err = BookCard(c, s, book).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if s.GetAllBookNum() == 0 && c.Param("id") == "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<!-- 没有任何书籍的时候 --> <div id=\"tab-contents\" role=\"tabpanel\" class=\"flex flex-col justify-start items-center flex-1 w-full h-full font-semibold text-lg text-base-content\" :class=\"(theme.toString() ===&#39;light&#39;||theme.toString() ===&#39;dark&#39;||theme.toString() ===&#39;retro&#39;||theme.toString() ===&#39;lofi&#39;||theme.toString() ===&#39;nord&#39;) ? ($store.global.bgPattern !== &#39;none&#39;?$store.global.bgPattern+&#39; bg-base-300&#39;:&#39;bg-base-300&#39;):($store.global.bgPattern !== &#39;none&#39;?$store.global.bgPattern:&#39;&#39;)\"><div class=\"flex flex-col justify-start w-5/6 md:w-3/5 min-w-[20rem] \"><div x-text=\"i18next.t(&#39;no_book_hint&#39;)\" class=\"flex flex-col justify-start w-full p-2 m-1 text-normal font-semibold border rounded-md shadow-md hover:shadow-2xl items-left bg-base-100 text-base-content border-slate-400\">没有可读书籍，请添加书库路径。添加完成3秒后，页面将自动刷新。</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = settings.StringArrayConfig("LocalStores", state.ServerConfig.LocalStores, "LocalStores_Description", true).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div></div><script>\n            // htmx出错时报错（Toast）\n        \tdocument.addEventListener('htmx:responseError', (event) => {\n              showToast(event.detail.xhr.statusText+\": \"+event.detail.xhr.responseURL, 'error');\n            });\n            // 删除字符串数组配置中的元素。此处仅用作打印调试信息。删除操作是由 htmx 完成的。\n        \tfunction deleteStringConfigValue(e) {\n        \t    const configName = e.getAttribute('data-config-name');\n                const arrawIndex = e.getAttribute('data-arraw-index');\n                const deleteValue = e.getAttribute('data-delete-value');\n                console.log(configName, arrawIndex, deleteValue);\n        \t}\n        \t// 添加字符串数组配置中的元素\n        \t// 此函数的作用，是修改 hx-vals 的值。实际的提交操作是由 htmx 完成的\n        \tfunction addStringConfigValue(e) {\n                const buttonID = e.getAttribute('id');\n                const configName = buttonID.replace('AddButton', '');\n                const addValue = document.getElementById(configName+'AddInput').value;\n                console.log(configName, addValue);\n                e.setAttribute('hx-vals', JSON.stringify({configName: configName, addValue: addValue}));\n            }\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
